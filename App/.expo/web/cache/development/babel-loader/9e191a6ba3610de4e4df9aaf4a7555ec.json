{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/CenterElement.react.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { ViewPropTypes } from \"../utils\";\nimport withTheme from \"../styles/withTheme\";\nvar propTypes = {\n  isSearchActive: PropTypes.bool.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  searchable: PropTypes.shape({\n    autoFocus: PropTypes.bool,\n    autoCapitalize: TextInput.propTypes.autoCapitalize,\n    autoCorrect: PropTypes.bool,\n    onChangeText: PropTypes.func,\n    onSubmitEditing: PropTypes.func,\n    placeholder: PropTypes.string\n  }),\n  style: PropTypes.shape({\n    centerElementContainer: ViewPropTypes.style,\n    titleText: Text.propTypes.style\n  }),\n  centerElement: PropTypes.node,\n  onPress: PropTypes.func,\n  onSearchTextChange: PropTypes.func.isRequired\n};\nvar defaultProps = {\n  onPress: null,\n  centerElement: null,\n  searchable: null,\n  style: {}\n};\n\nfunction getStyles(props) {\n  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var leftElement = props.leftElement,\n      theme = props.theme;\n  var toolbar = theme.toolbar,\n      toolbarSearchActive = theme.toolbarSearchActive;\n  var isSearchActive = state.isSearchActive;\n  var local = {};\n\n  if (props.color) {\n    local.icon = {\n      color: props.color\n    };\n  }\n\n  if (!leftElement) {\n    local.centerElementContainer = {\n      marginLeft: 16\n    };\n  }\n\n  return {\n    centerElementContainer: [toolbar.centerElementContainer, isSearchActive && toolbarSearchActive.centerElementContainer, local.centerElementContainer, props.style.centerElementContainer],\n    titleText: [toolbar.titleText, isSearchActive && toolbarSearchActive.titleText, props.style.titleText]\n  };\n}\n\nvar CenterElement = function (_PureComponent) {\n  _inherits(CenterElement, _PureComponent);\n\n  function CenterElement(props, context) {\n    var _this;\n\n    _classCallCheck(this, CenterElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CenterElement).call(this, props, context));\n\n    _this.animateElements = function (nextIsSearchActive) {\n      var opacityValue = _this.state.opacityValue;\n      Animated.timing(opacityValue, {\n        toValue: 0,\n        duration: 112,\n        easing: Easing.linear,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          isSearchActive: nextIsSearchActive\n        });\n\n        Animated.timing(opacityValue, {\n          toValue: 1,\n          duration: 112,\n          easing: Easing.linear,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this.state = {\n      isSearchActive: props.isSearchActive,\n      opacityValue: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(CenterElement, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var isSearchActive = this.props.isSearchActive;\n\n      if (isSearchActive !== nextProps.isSearchActive) {\n        this.animateElements(nextProps.isSearchActive);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          searchable = _this$props.searchable,\n          centerElement = _this$props.centerElement,\n          onPress = _this$props.onPress,\n          onSearchTextChange = _this$props.onSearchTextChange,\n          searchValue = _this$props.searchValue;\n      var _this$state = this.state,\n          opacityValue = _this$state.opacityValue,\n          isSearchActive = _this$state.isSearchActive;\n      var styles = getStyles(this.props, this.state);\n      var content = null;\n\n      if (searchable && isSearchActive) {\n        content = React.createElement(TextInput, {\n          ref: function ref(_ref) {\n            _this2.searchFieldRef = _ref;\n          },\n          autoFocus: searchable.autoFocus,\n          autoCapitalize: searchable.autoCapitalize,\n          autoCorrect: searchable.autoCorrect,\n          onChangeText: onSearchTextChange,\n          onSubmitEditing: searchable.onSubmitEditing,\n          placeholder: searchable.placeholder,\n          style: [styles.titleText, {\n            marginLeft: 0\n          }],\n          underlineColorAndroid: \"transparent\",\n          value: searchValue,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          }\n        });\n      } else if (typeof centerElement === 'string') {\n        content = React.createElement(Text, {\n          numberOfLines: 1,\n          style: styles.titleText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          }\n        }, centerElement);\n      } else {\n        content = centerElement;\n      }\n\n      return React.createElement(TouchableWithoutFeedback, {\n        key: \"center\",\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.centerElementContainer, {\n          opacity: opacityValue\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        }\n      }, content));\n    }\n  }]);\n\n  return CenterElement;\n}(PureComponent);\n\nCenterElement.propTypes = propTypes;\nCenterElement.defaultProps = defaultProps;\nexport default withTheme(CenterElement);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/CenterElement.react.js"],"names":["React","PureComponent","PropTypes","ViewPropTypes","withTheme","propTypes","isSearchActive","bool","isRequired","searchValue","string","searchable","shape","autoFocus","autoCapitalize","TextInput","autoCorrect","onChangeText","func","onSubmitEditing","placeholder","style","centerElementContainer","titleText","Text","centerElement","node","onPress","onSearchTextChange","defaultProps","getStyles","props","state","leftElement","theme","toolbar","toolbarSearchActive","local","color","icon","marginLeft","CenterElement","context","animateElements","nextIsSearchActive","opacityValue","Animated","timing","toValue","duration","easing","Easing","linear","useNativeDriver","start","setState","Value","nextProps","styles","content","ref","searchFieldRef","opacity"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  Text,\n  TextInput,\n  Easing,\n} from 'react-native';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport { ViewPropTypes } from '../utils';\nimport withTheme from '../styles/withTheme';\n\nconst propTypes = {\n  isSearchActive: PropTypes.bool.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  searchable: PropTypes.shape({\n    autoFocus: PropTypes.bool,\n    autoCapitalize: TextInput.propTypes.autoCapitalize, // eslint-disable-line\n    autoCorrect: PropTypes.bool,\n    onChangeText: PropTypes.func,\n    onSubmitEditing: PropTypes.func,\n    placeholder: PropTypes.string,\n  }),\n  style: PropTypes.shape({\n    centerElementContainer: ViewPropTypes.style,\n    titleText: Text.propTypes.style, // eslint-disable-line\n  }),\n  centerElement: PropTypes.node,\n  onPress: PropTypes.func,\n  onSearchTextChange: PropTypes.func.isRequired,\n};\nconst defaultProps = {\n  onPress: null,\n  centerElement: null,\n  searchable: null,\n  style: {},\n};\n\nfunction getStyles(props, state = {}) {\n  const { leftElement, theme } = props;\n  const { toolbar, toolbarSearchActive } = theme;\n  const { isSearchActive } = state;\n\n  const local = {};\n\n  if (props.color) {\n    local.icon = {\n      color: props.color,\n    };\n  }\n\n  if (!leftElement) {\n    local.centerElementContainer = {\n      marginLeft: 16,\n    };\n  }\n\n  return {\n    centerElementContainer: [\n      toolbar.centerElementContainer,\n      isSearchActive && toolbarSearchActive.centerElementContainer,\n      local.centerElementContainer,\n      props.style.centerElementContainer,\n    ],\n    titleText: [\n      toolbar.titleText,\n      isSearchActive && toolbarSearchActive.titleText,\n      props.style.titleText,\n    ],\n  };\n}\n\nclass CenterElement extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      isSearchActive: props.isSearchActive,\n      opacityValue: new Animated.Value(1),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { isSearchActive } = this.props;\n\n    if (isSearchActive !== nextProps.isSearchActive) {\n      this.animateElements(nextProps.isSearchActive);\n    }\n  }\n\n  animateElements = nextIsSearchActive => {\n    const { opacityValue } = this.state;\n\n    Animated.timing(opacityValue, {\n      toValue: 0,\n      duration: 112,\n      easing: Easing.linear,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({\n        isSearchActive: nextIsSearchActive,\n      });\n\n      Animated.timing(opacityValue, {\n        toValue: 1,\n        duration: 112,\n        easing: Easing.linear,\n        useNativeDriver: true,\n      }).start();\n    });\n  };\n\n  render() {\n    const {\n      searchable,\n      centerElement,\n      onPress,\n      onSearchTextChange,\n      searchValue,\n    } = this.props;\n    const { opacityValue, isSearchActive } = this.state;\n    const styles = getStyles(this.props, this.state);\n\n    // there can be situastion like this:\n    // 1. Given toolbar with title and searchable feature\n    // 2. User presses search icon - isSearchActive === true\n    // 3. User writes some search text and then select searched items in list (just example)\n    // 4. Then you want to display to user he has 'n' selected items\n    // 5. So you render toolbar with another props like centerElement===\"n items selected\" but\n    //    you don't want user to be able search anymore (after he has selected something)\n    // 6. So this.props.searchable===null and isSearchActive === true, if you pass searchable\n    //    object again to this instance, search text and isSearchActive will be still set\n    let content = null;\n\n    if (searchable && isSearchActive) {\n      content = (\n        <TextInput\n          ref={ref => {\n            this.searchFieldRef = ref;\n          }}\n          autoFocus={searchable.autoFocus}\n          autoCapitalize={searchable.autoCapitalize}\n          autoCorrect={searchable.autoCorrect}\n          onChangeText={onSearchTextChange}\n          onSubmitEditing={searchable.onSubmitEditing}\n          placeholder={searchable.placeholder}\n          style={[styles.titleText, { marginLeft: 0 }]}\n          underlineColorAndroid=\"transparent\"\n          value={searchValue}\n        />\n      );\n    } else if (typeof centerElement === 'string') {\n      content = (\n        <Text numberOfLines={1} style={styles.titleText}>\n          {centerElement}\n        </Text>\n      );\n    } else {\n      content = centerElement;\n    }\n\n    return (\n      <TouchableWithoutFeedback key=\"center\" onPress={onPress}>\n        <Animated.View\n          style={[styles.centerElementContainer, { opacity: opacityValue }]}\n        >\n          {content}\n        </Animated.View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nCenterElement.propTypes = propTypes;\nCenterElement.defaultProps = defaultProps;\n\nexport default withTheme(CenterElement);\n"]},"metadata":{},"sourceType":"module"}