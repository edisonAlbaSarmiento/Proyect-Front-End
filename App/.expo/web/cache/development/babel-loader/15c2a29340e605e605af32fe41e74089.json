{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Checkbox/Checkbox.react.js\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport IconToggle from \"../IconToggle\";\nimport RippleFeedback from \"../RippleFeedback\";\nimport { ViewPropTypes } from \"../utils\";\nimport withTheme from \"../styles/withTheme\";\nvar propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  uncheckedIcon: PropTypes.string,\n  checkedIcon: PropTypes.string,\n  onCheck: PropTypes.func.isRequired,\n  iconSet: PropTypes.string,\n  style: PropTypes.shape({\n    container: ViewPropTypes.style,\n    icon: PropTypes.any,\n    label: Text.propTypes.style\n  }),\n  size: PropTypes.number\n};\nvar defaultProps = {\n  checked: false,\n  checkedIcon: 'check-box',\n  uncheckedIcon: 'check-box-outline-blank',\n  disabled: false,\n  style: {},\n  size: 24,\n  iconSet: null\n};\n\nfunction getStyles(props) {\n  var disabled = props.disabled,\n      theme = props.theme;\n  var checkbox = theme.checkbox,\n      palette = theme.palette;\n  var local = {};\n  return {\n    container: [checkbox.container, local.container, props.style.container],\n    icon: [checkbox.icon, props.style.icon],\n    label: [checkbox.label, local.label, props.style.label, disabled && {\n      color: palette.disabledTextColor\n    }]\n  };\n}\n\nvar Checkbox = function (_PureComponent) {\n  _inherits(Checkbox, _PureComponent);\n\n  function Checkbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onPress = function () {\n      var _this$props = _this.props,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          onCheck = _this$props.onCheck,\n          value = _this$props.value;\n\n      if (!disabled && onCheck) {\n        onCheck(!checked, value);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          checked = _this$props2.checked,\n          checkedIcon = _this$props2.checkedIcon,\n          uncheckedIcon = _this$props2.uncheckedIcon,\n          disabled = _this$props2.disabled,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          label = _this$props2.label,\n          iconSet = _this$props2.iconSet;\n      var styles = getStyles(this.props);\n      var labelColor = StyleSheet.flatten(styles.label).color;\n      var iconColor = StyleSheet.flatten(styles.icon).color;\n      var content = React.createElement(View, {\n        style: styles.container,\n        pointerEvents: \"box-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        }\n      }, React.createElement(IconToggle, {\n        key: value + \"-\" + checked,\n        name: checked ? checkedIcon : uncheckedIcon,\n        disabled: disabled,\n        color: checked ? iconColor : labelColor,\n        onPress: this.onPress,\n        iconSet: iconSet,\n        size: size,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        }\n      }, label));\n\n      if (disabled) {\n        return content;\n      }\n\n      return React.createElement(RippleFeedback, {\n        onPress: this.onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        }\n      }, content);\n    }\n  }]);\n\n  return Checkbox;\n}(PureComponent);\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\nexport default withTheme(Checkbox);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Checkbox/Checkbox.react.js"],"names":["React","PureComponent","PropTypes","IconToggle","RippleFeedback","ViewPropTypes","withTheme","propTypes","label","string","isRequired","value","oneOfType","number","checked","bool","disabled","uncheckedIcon","checkedIcon","onCheck","func","iconSet","style","shape","container","icon","any","Text","size","defaultProps","getStyles","props","theme","checkbox","palette","local","color","disabledTextColor","Checkbox","onPress","styles","labelColor","StyleSheet","flatten","iconColor","content"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport { StyleSheet, Text, View } from 'react-native';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport IconToggle from '../IconToggle';\nimport RippleFeedback from '../RippleFeedback';\nimport { ViewPropTypes } from '../utils';\nimport withTheme from '../styles/withTheme';\n\nconst propTypes = {\n  /**\n   * Text will be shown after Icon\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Value will be returned when onCheck is fired\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  /**\n   * True if it's check\n   */\n  checked: PropTypes.bool,\n  /**\n   * Is checkbox active\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Will be shown when checked is false\n   */\n  uncheckedIcon: PropTypes.string,\n  /**\n   * Will be shown when checked is true\n   */\n  checkedIcon: PropTypes.string,\n  /**\n   * Event that is called when state is changed\n   */\n  onCheck: PropTypes.func.isRequired,\n  /**\n   * Name of Icon set that should be use. From react-native-vector-icons\n   */\n  iconSet: PropTypes.string,\n  style: PropTypes.shape({\n    container: ViewPropTypes.style,\n    // FIXME:\n    icon: PropTypes.any, // eslint-disable-line\n    label: Text.propTypes.style, // eslint-disable-line\n  }),\n  /**\n   * Size of icon\n   */\n  size: PropTypes.number,\n};\nconst defaultProps = {\n  checked: false,\n  checkedIcon: 'check-box',\n  uncheckedIcon: 'check-box-outline-blank',\n  disabled: false,\n  style: {},\n  size: 24,\n  iconSet: null,\n};\n\nfunction getStyles(props) {\n  const { disabled, theme } = props;\n  const { checkbox, palette } = theme;\n\n  const local = {};\n\n  return {\n    container: [checkbox.container, local.container, props.style.container],\n    icon: [checkbox.icon, props.style.icon],\n    label: [\n      checkbox.label,\n      local.label,\n      props.style.label,\n      // disabled has the highest priority\n      disabled && { color: palette.disabledTextColor },\n    ],\n  };\n}\n\nclass Checkbox extends PureComponent {\n  onPress = () => {\n    const { checked, disabled, onCheck, value } = this.props;\n\n    if (!disabled && onCheck) {\n      onCheck(!checked, value);\n    }\n  };\n\n  render() {\n    const {\n      checked,\n      checkedIcon,\n      uncheckedIcon,\n      disabled,\n      value,\n      size,\n      label,\n      iconSet,\n    } = this.props;\n\n    const styles = getStyles(this.props);\n\n    const labelColor = StyleSheet.flatten(styles.label).color;\n    const iconColor = StyleSheet.flatten(styles.icon).color;\n\n    const content = (\n      <View style={styles.container} pointerEvents=\"box-only\">\n        <IconToggle\n          key={`${value}-${checked}`}\n          name={checked ? checkedIcon : uncheckedIcon}\n          disabled={disabled}\n          color={checked ? iconColor : labelColor}\n          onPress={this.onPress}\n          iconSet={iconSet}\n          size={size}\n        />\n        <Text style={styles.label}>{label}</Text>\n      </View>\n    );\n\n    if (disabled) {\n      return content;\n    }\n\n    return <RippleFeedback onPress={this.onPress}>{content}</RippleFeedback>;\n  }\n}\n\nCheckbox.propTypes = propTypes;\nCheckbox.defaultProps = defaultProps;\n\nexport default withTheme(Checkbox);\n"]},"metadata":{},"sourceType":"module"}