{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/LeftElement.react.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ViewPropTypes } from \"../utils\";\nimport withTheme from \"../styles/withTheme\";\nimport IconToggle from \"../IconToggle\";\nvar propTypes = {\n  leftElementTestID: PropTypes.string,\n  isSearchActive: PropTypes.bool.isRequired,\n  style: PropTypes.shape({\n    leftElementContainer: ViewPropTypes.style,\n    leftElement: Text.propTypes.style\n  }),\n  size: PropTypes.number,\n  leftElement: PropTypes.node,\n  onLeftElementPress: PropTypes.func,\n  onSearchClose: PropTypes.func,\n  iconSet: PropTypes.string\n};\nvar defaultProps = {\n  leftElementTestID: null,\n  leftElement: null,\n  onLeftElementPress: null,\n  onSearchClose: null,\n  style: {},\n  size: 24,\n  iconSet: null\n};\nvar SEARCH_FORWARD_ICON = 'arrow-forward';\n\nfunction shouldUpdateStyles(props, nextProps) {\n  if (props.style !== nextProps.styles) {\n    return true;\n  }\n\n  if (props.isSearchActive !== nextProps.isSearchActive) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getStyles(props) {\n  var isSearchActive = props.isSearchActive,\n      theme = props.theme;\n  var toolbar = theme.toolbar,\n      toolbarSearchActive = theme.toolbarSearchActive;\n  return {\n    leftElementContainer: [toolbar.leftElementContainer, isSearchActive && toolbarSearchActive.leftElementContainer, props.style.leftElementContainer],\n    leftElement: [toolbar.leftElement, isSearchActive && toolbarSearchActive.leftElement, props.style.leftElement]\n  };\n}\n\nvar LeftElement = function (_PureComponent) {\n  _inherits(LeftElement, _PureComponent);\n\n  function LeftElement(props, context) {\n    var _this;\n\n    _classCallCheck(this, LeftElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeftElement).call(this, props, context));\n\n    _this.animateIcon = function (activate) {\n      var spinValue = _this.state.spinValue;\n      var leftElement = _this.props.leftElement;\n      var toValue = activate ? 1 : 0;\n      Animated.timing(spinValue, {\n        toValue: 0.5,\n        duration: 112,\n        easing: Easing.linear,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          leftElement: activate ? SEARCH_FORWARD_ICON : leftElement\n        });\n\n        Animated.timing(spinValue, {\n          toValue: toValue,\n          duration: 112,\n          easing: Easing.linear,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this.state = {\n      styles: getStyles(_this.props),\n      leftElement: props.isSearchActive ? SEARCH_FORWARD_ICON : props.leftElement,\n      spinValue: new Animated.Value(props.isSearchActive ? 1 : 0)\n    };\n    return _this;\n  }\n\n  _createClass(LeftElement, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props = this.props,\n          isSearchActive = _this$props.isSearchActive,\n          leftElement = _this$props.leftElement;\n\n      if (nextProps.isSearchActive !== isSearchActive) {\n        this.animateIcon(nextProps.isSearchActive);\n      }\n\n      if (leftElement !== nextProps.leftElement) {\n        this.setState({\n          leftElement: nextProps.leftElement\n        });\n      }\n\n      if (shouldUpdateStyles(this.props, nextProps)) {\n        this.setState({\n          styles: getStyles(nextProps, this.context)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          styles = _this$state.styles,\n          leftElement = _this$state.leftElement,\n          spinValue = _this$state.spinValue;\n      var _this$props2 = this.props,\n          leftElementTestID = _this$props2.leftElementTestID,\n          isSearchActive = _this$props2.isSearchActive,\n          onLeftElementPress = _this$props2.onLeftElementPress,\n          onSearchClose = _this$props2.onSearchClose,\n          size = _this$props2.size,\n          iconSet = _this$props2.iconSet;\n\n      if (!leftElement) {\n        return null;\n      }\n\n      if (!isSearchActive && React.isValidElement(leftElement)) {\n        return React.createElement(Animated.View, {\n          style: styles.leftElementContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, React.cloneElement(leftElement, {\n          key: 'customLeftElement'\n        }));\n      }\n\n      var onPress = onLeftElementPress;\n\n      if (isSearchActive) {\n        onPress = onSearchClose;\n      }\n\n      var flattenLeftElement = StyleSheet.flatten(styles.leftElement);\n      var spin = spinValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '180deg']\n      });\n      return React.createElement(Animated.View, {\n        testID: leftElementTestID,\n        style: [styles.leftElementContainer, {\n          transform: [{\n            rotate: spin\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        }\n      }, React.createElement(IconToggle, {\n        key: leftElement,\n        name: leftElement,\n        color: flattenLeftElement.color,\n        onPress: onPress,\n        size: size,\n        iconSet: iconSet,\n        style: flattenLeftElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        }\n      }));\n    }\n  }]);\n\n  return LeftElement;\n}(PureComponent);\n\nLeftElement.propTypes = propTypes;\nLeftElement.defaultProps = defaultProps;\nexport default withTheme(LeftElement);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/LeftElement.react.js"],"names":["React","PureComponent","PropTypes","ViewPropTypes","withTheme","IconToggle","propTypes","leftElementTestID","string","isSearchActive","bool","isRequired","style","shape","leftElementContainer","leftElement","Text","size","number","node","onLeftElementPress","func","onSearchClose","iconSet","defaultProps","SEARCH_FORWARD_ICON","shouldUpdateStyles","props","nextProps","styles","getStyles","theme","toolbar","toolbarSearchActive","LeftElement","context","animateIcon","activate","spinValue","state","toValue","Animated","timing","duration","easing","Easing","linear","useNativeDriver","start","setState","Value","isValidElement","cloneElement","key","onPress","flattenLeftElement","StyleSheet","flatten","spin","interpolate","inputRange","outputRange","transform","rotate","color"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, StyleSheet, Text } from 'react-native';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport { ViewPropTypes } from '../utils';\nimport withTheme from '../styles/withTheme';\n\nimport IconToggle from '../IconToggle';\n\nconst propTypes = {\n  leftElementTestID: PropTypes.string,\n  isSearchActive: PropTypes.bool.isRequired,\n  style: PropTypes.shape({\n    leftElementContainer: ViewPropTypes.style,\n    leftElement: Text.propTypes.style, // eslint-disable-line\n  }),\n  size: PropTypes.number,\n  leftElement: PropTypes.node,\n  onLeftElementPress: PropTypes.func,\n  onSearchClose: PropTypes.func,\n  /**\n   * Name of Icon set that should be use. From react-native-vector-icons\n   */\n  iconSet: PropTypes.string,\n};\nconst defaultProps = {\n  leftElementTestID: null,\n  leftElement: null,\n  onLeftElementPress: null,\n  onSearchClose: null,\n  style: {},\n  size: 24,\n  iconSet: null,\n};\n\nconst SEARCH_FORWARD_ICON = 'arrow-forward';\n\nfunction shouldUpdateStyles(props, nextProps) {\n  if (props.style !== nextProps.styles) {\n    return true;\n  }\n  if (props.isSearchActive !== nextProps.isSearchActive) {\n    return true;\n  }\n\n  return false;\n}\nfunction getStyles(props) {\n  const { isSearchActive, theme } = props;\n  const { toolbar, toolbarSearchActive } = theme;\n\n  return {\n    leftElementContainer: [\n      toolbar.leftElementContainer,\n      isSearchActive && toolbarSearchActive.leftElementContainer,\n      props.style.leftElementContainer,\n    ],\n    leftElement: [\n      toolbar.leftElement,\n      isSearchActive && toolbarSearchActive.leftElement,\n      props.style.leftElement,\n    ],\n  };\n}\n\nclass LeftElement extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      styles: getStyles(this.props),\n      leftElement: props.isSearchActive\n        ? SEARCH_FORWARD_ICON\n        : props.leftElement,\n      spinValue: new Animated.Value(props.isSearchActive ? 1 : 0),\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { isSearchActive, leftElement } = this.props;\n\n    if (nextProps.isSearchActive !== isSearchActive) {\n      this.animateIcon(nextProps.isSearchActive);\n    }\n\n    if (leftElement !== nextProps.leftElement) {\n      this.setState({ leftElement: nextProps.leftElement });\n    }\n\n    if (shouldUpdateStyles(this.props, nextProps)) {\n      this.setState({ styles: getStyles(nextProps, this.context) });\n    }\n  }\n\n  animateIcon = activate => {\n    const { spinValue } = this.state;\n    const { leftElement } = this.props;\n\n    const toValue = activate ? 1 : 0;\n\n    Animated.timing(spinValue, {\n      toValue: 0.5,\n      duration: 112,\n      easing: Easing.linear,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({\n        leftElement: activate ? SEARCH_FORWARD_ICON : leftElement,\n      });\n\n      Animated.timing(spinValue, {\n        toValue,\n        duration: 112,\n        easing: Easing.linear,\n        useNativeDriver: true,\n      }).start();\n    });\n  };\n\n  render() {\n    const { styles, leftElement, spinValue } = this.state;\n    const {\n      leftElementTestID,\n      isSearchActive,\n      onLeftElementPress,\n      onSearchClose,\n      size,\n      iconSet,\n    } = this.props;\n\n    if (!leftElement) {\n      return null;\n    }\n\n    if (!isSearchActive && React.isValidElement(leftElement)) {\n      return (\n        <Animated.View style={styles.leftElementContainer}>\n          {React.cloneElement(leftElement, {\n            key: 'customLeftElement',\n          })}\n        </Animated.View>\n      );\n    }\n\n    let onPress = onLeftElementPress;\n\n    if (isSearchActive) {\n      onPress = onSearchClose;\n    }\n\n    const flattenLeftElement = StyleSheet.flatten(styles.leftElement);\n    const spin = spinValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: ['0deg', '180deg'],\n    });\n\n    return (\n      <Animated.View\n        testID={leftElementTestID}\n        style={[styles.leftElementContainer, { transform: [{ rotate: spin }] }]}\n      >\n        <IconToggle\n          key={leftElement}\n          name={leftElement}\n          color={flattenLeftElement.color}\n          onPress={onPress}\n          size={size}\n          iconSet={iconSet}\n          style={flattenLeftElement}\n        />\n      </Animated.View>\n    );\n  }\n}\n\nLeftElement.propTypes = propTypes;\nLeftElement.defaultProps = defaultProps;\n\nexport default withTheme(LeftElement);\n"]},"metadata":{},"sourceType":"module"}