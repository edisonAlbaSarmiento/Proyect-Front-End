{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/IconToggle/IconToggle.react.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Color from 'color';\nimport withTheme from \"../styles/withTheme\";\nimport { ViewPropTypes } from \"../utils\";\nimport { ELEVATION_ZINDEX } from \"../styles/constants\";\nimport Icon from \"../Icon\";\nvar propTypes = {\n  testID: PropTypes.string,\n  color: PropTypes.string,\n  underlayColor: PropTypes.string,\n  maxOpacity: PropTypes.number,\n  percent: PropTypes.number,\n  disabled: PropTypes.bool,\n  size: PropTypes.number,\n  name: PropTypes.string,\n  iconSet: PropTypes.string,\n  children: PropTypes.element,\n  onPress: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.shape({\n    container: ViewPropTypes.style,\n    icon: Text.propTypes.style\n  }), PropTypes.array])\n};\nvar defaultProps = {\n  testID: null,\n  children: null,\n  onPress: null,\n  color: null,\n  underlayColor: null,\n  size: 24,\n  name: null,\n  disabled: false,\n  percent: 90,\n  maxOpacity: 0.16,\n  style: {},\n  iconSet: null\n};\n\nfunction getStyles(props, state) {\n  var _props$theme = props.theme,\n      iconToggle = _props$theme.iconToggle,\n      palette = _props$theme.palette;\n  var local = {};\n\n  if (props.color) {\n    local.icon = {\n      color: props.color\n    };\n  }\n\n  if (state.containerSize) {\n    local.container = {\n      width: state.containerSize,\n      height: state.containerSize\n    };\n  }\n\n  return {\n    container: [iconToggle.container, local.container, props.style.container],\n    icon: [iconToggle.icon, local.icon, props.style.icon, props.disabled && {\n      color: palette.disabledColor\n    }]\n  };\n}\n\nfunction getIconSize(props) {\n  var spacing = props.theme.spacing;\n  var icon = props.style.icon;\n\n  if (icon && icon.width) {\n    return icon.width;\n  }\n\n  if (props.size) {\n    return props.size;\n  }\n\n  return spacing.iconSize;\n}\n\nfunction getContainerSize(iconSize) {\n  return iconSize * 2;\n}\n\nfunction getRippleSize(containerSize, percent) {\n  return percent / 100 * containerSize;\n}\n\nvar IconToggle = function (_PureComponent) {\n  _inherits(IconToggle, _PureComponent);\n\n  function IconToggle(props, context) {\n    var _this;\n\n    _classCallCheck(this, IconToggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IconToggle).call(this, props, context));\n\n    _this.renderRippleView = function (styles) {\n      var _this$state = _this.state,\n          scaleValue = _this$state.scaleValue,\n          opacityValue = _this$state.opacityValue,\n          containerSize = _this$state.containerSize,\n          rippleSize = _this$state.rippleSize;\n      var color = Color(StyleSheet.flatten(styles.icon).color);\n      _this.maxOpacity = color.isDark() ? 0.12 : 0.3;\n      var top = (containerSize - rippleSize) / 2;\n      return React.createElement(Animated.View, {\n        style: [{\n          position: 'absolute',\n          top: top,\n          left: top,\n          width: rippleSize,\n          height: rippleSize,\n          borderRadius: rippleSize / 2,\n          transform: [{\n            scale: scaleValue\n          }],\n          opacity: opacityValue,\n          backgroundColor: color.toString(),\n          zIndex: Platform.OS === 'ios' ? ELEVATION_ZINDEX : null\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        }\n      });\n    };\n\n    _this.renderIcon = function (styles) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          children = _this$props.children,\n          iconSet = _this$props.iconSet;\n      var iconSize = _this.state.iconSize;\n\n      if (children) {\n        return children;\n      }\n\n      var _StyleSheet$flatten = StyleSheet.flatten(styles.icon),\n          color = _StyleSheet$flatten.color;\n\n      return React.createElement(Icon, {\n        iconSet: iconSet,\n        name: name,\n        color: color,\n        size: iconSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        }\n      });\n    };\n\n    var _iconSize = getIconSize(props);\n\n    var _containerSize = getContainerSize(_iconSize);\n\n    _this.state = {\n      scaleValue: new Animated.Value(0.01),\n      opacityValue: new Animated.Value(props.maxOpacity),\n      containerSize: _containerSize,\n      iconSize: _iconSize,\n      rippleSize: getRippleSize(_containerSize, props.percent)\n    };\n    _this.onPressIn = _this.onPressIn.bind(_assertThisInitialized(_this));\n    _this.onPressOut = _this.onPressOut.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(IconToggle, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var iconSize = this.state.iconSize;\n      var percent = this.props.percent;\n      var nextIconSize = getIconSize(nextProps);\n\n      if (iconSize !== nextIconSize || nextProps.percent !== percent) {\n        var containerSize = getContainerSize(iconSize);\n        this.setState({\n          containerSize: containerSize,\n          iconSize: iconSize,\n          rippleSize: getRippleSize(containerSize, nextProps.percent)\n        });\n      }\n    }\n  }, {\n    key: \"onPressIn\",\n    value: function onPressIn() {\n      var disabled = this.props.disabled;\n      var scaleValue = this.state.scaleValue;\n\n      if (!disabled) {\n        Animated.timing(scaleValue, {\n          toValue: 1,\n          duration: 225,\n          easing: Easing.bezier(0.0, 0.0, 0.2, 1),\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"onPressOut\",\n    value: function onPressOut() {\n      var _this$props2 = this.props,\n          disabled = _this$props2.disabled,\n          onPress = _this$props2.onPress,\n          maxOpacity = _this$props2.maxOpacity;\n      var _this$state2 = this.state,\n          scaleValue = _this$state2.scaleValue,\n          opacityValue = _this$state2.opacityValue;\n\n      if (!disabled) {\n        Animated.timing(opacityValue, {\n          toValue: 0,\n          useNativeDriver: true\n        }).start(function () {\n          scaleValue.setValue(0.01);\n          opacityValue.setValue(maxOpacity);\n        });\n\n        if (onPress) {\n          onPress();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var testID = this.props.testID;\n      var styles = getStyles(this.props, this.state);\n      return React.createElement(TouchableWithoutFeedback, {\n        testID: testID,\n        onPressIn: this.onPressIn,\n        onPressOut: this.onPressOut,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        }\n      }, this.renderRippleView(styles), React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        }\n      }, this.renderIcon(styles))));\n    }\n  }]);\n\n  return IconToggle;\n}(PureComponent);\n\nIconToggle.propTypes = propTypes;\nIconToggle.defaultProps = defaultProps;\nexport default withTheme(IconToggle);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/IconToggle/IconToggle.react.js"],"names":["React","PureComponent","PropTypes","Color","withTheme","ViewPropTypes","ELEVATION_ZINDEX","Icon","propTypes","testID","string","color","underlayColor","maxOpacity","number","percent","disabled","bool","size","name","iconSet","children","element","onPress","func","style","oneOfType","shape","container","icon","Text","array","defaultProps","getStyles","props","state","theme","iconToggle","palette","local","containerSize","width","height","disabledColor","getIconSize","spacing","iconSize","getContainerSize","getRippleSize","IconToggle","context","renderRippleView","styles","scaleValue","opacityValue","rippleSize","StyleSheet","flatten","isDark","top","position","left","borderRadius","transform","scale","opacity","backgroundColor","toString","zIndex","Platform","OS","renderIcon","Animated","Value","onPressIn","bind","onPressOut","nextProps","nextIconSize","setState","timing","toValue","duration","easing","Easing","bezier","useNativeDriver","start","setValue"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport {\n  View,\n  Text,\n  Animated,\n  StyleSheet,\n  Platform,\n  Easing,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport Color from 'color';\n\nimport withTheme from '../styles/withTheme';\nimport { ViewPropTypes } from '../utils';\nimport { ELEVATION_ZINDEX } from '../styles/constants';\nimport Icon from '../Icon';\n\nconst propTypes = {\n  testID: PropTypes.string,\n  color: PropTypes.string,\n  /**\n   * The color of the underlay that will show when the touch is active.\n   */\n  underlayColor: PropTypes.string,\n  /**\n   * Max opacity of ripple effect\n   */\n  maxOpacity: PropTypes.number,\n  /**\n   * Size of underlayColor\n   */\n  percent: PropTypes.number,\n  /**\n   * If true, the interaction will be forbidden\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Size of icon (default is 24 - see spacing in palette)\n   */\n  size: PropTypes.number,\n  /**\n   * Name of icon to show\n   */\n  name: PropTypes.string,\n  /**\n   * Name of Icon set that should be use. From react-native-vector-icons\n   */\n  iconSet: PropTypes.string,\n  /**\n   * It'll be used instead of icon (see props name) if exists\n   */\n  children: PropTypes.element,\n  /**\n   * Call when icon was pressed\n   */\n  onPress: PropTypes.func,\n  style: PropTypes.oneOfType([\n    PropTypes.shape({\n      container: ViewPropTypes.style,\n      icon: Text.propTypes.style, // eslint-disable-line\n    }),\n    PropTypes.array,\n  ]),\n};\nconst defaultProps = {\n  testID: null,\n  children: null,\n  onPress: null,\n  color: null,\n  underlayColor: null,\n  size: 24,\n  name: null,\n  disabled: false,\n  percent: 90,\n  maxOpacity: 0.16,\n  style: {},\n  iconSet: null,\n};\n\nfunction getStyles(props, state) {\n  const { iconToggle, palette } = props.theme;\n\n  const local = {};\n\n  if (props.color) {\n    local.icon = {\n      color: props.color,\n    };\n  }\n\n  if (state.containerSize) {\n    local.container = {\n      width: state.containerSize,\n      height: state.containerSize,\n    };\n  }\n\n  return {\n    container: [iconToggle.container, local.container, props.style.container],\n    icon: [\n      iconToggle.icon,\n      local.icon,\n      props.style.icon,\n      // diabled has the highest priority - because user can use color props and disabled\n      // together\n      props.disabled && { color: palette.disabledColor },\n    ],\n  };\n}\n/**\n * Returns size of icon. Priority order: style prop, size prop, spacing.iconSize.\n */\nfunction getIconSize(props) {\n  const { spacing } = props.theme;\n  const { icon } = props.style;\n\n  if (icon && icon.width) {\n    return icon.width;\n  }\n  if (props.size) {\n    return props.size;\n  }\n\n  return spacing.iconSize;\n}\nfunction getContainerSize(iconSize) {\n  return iconSize * 2;\n}\nfunction getRippleSize(containerSize, percent) {\n  return (percent / 100) * containerSize;\n}\n\nclass IconToggle extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    const iconSize = getIconSize(props);\n    const containerSize = getContainerSize(iconSize);\n\n    this.state = {\n      scaleValue: new Animated.Value(0.01),\n      opacityValue: new Animated.Value(props.maxOpacity),\n      containerSize,\n      iconSize,\n      rippleSize: getRippleSize(containerSize, props.percent),\n    };\n\n    this.onPressIn = this.onPressIn.bind(this);\n    this.onPressOut = this.onPressOut.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { iconSize } = this.state;\n    const { percent } = this.props;\n\n    const nextIconSize = getIconSize(nextProps);\n\n    if (iconSize !== nextIconSize || nextProps.percent !== percent) {\n      const containerSize = getContainerSize(iconSize);\n\n      this.setState({\n        containerSize,\n        iconSize,\n        rippleSize: getRippleSize(containerSize, nextProps.percent),\n      });\n    }\n  }\n\n  onPressIn() {\n    const { disabled } = this.props;\n    const { scaleValue } = this.state;\n\n    if (!disabled) {\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: 225,\n        easing: Easing.bezier(0.0, 0.0, 0.2, 1),\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  onPressOut() {\n    const { disabled, onPress, maxOpacity } = this.props;\n    const { scaleValue, opacityValue } = this.state;\n\n    if (!disabled) {\n      Animated.timing(opacityValue, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start(() => {\n        scaleValue.setValue(0.01);\n        opacityValue.setValue(maxOpacity);\n      });\n\n      if (onPress) {\n        onPress();\n      }\n    }\n  }\n\n  renderRippleView = styles => {\n    const { scaleValue, opacityValue, containerSize, rippleSize } = this.state;\n\n    const color = Color(StyleSheet.flatten(styles.icon).color);\n    // https://material.google.com/components/buttons.html#buttons-toggle-buttons\n    this.maxOpacity = color.isDark() ? 0.12 : 0.3;\n\n    const top = (containerSize - rippleSize) / 2;\n\n    return (\n      // we need set zindex for iOS, because the components with elevation have the\n      // zindex set as well, thus, there could be displayed backgroundColor of\n      // component with bigger zindex - and that's not good\n      <Animated.View\n        style={[\n          {\n            position: 'absolute',\n            top,\n            left: top,\n            width: rippleSize,\n            height: rippleSize,\n            borderRadius: rippleSize / 2,\n            transform: [{ scale: scaleValue }],\n            opacity: opacityValue,\n            backgroundColor: color.toString(),\n            zIndex: Platform.OS === 'ios' ? ELEVATION_ZINDEX : null,\n          },\n        ]}\n      />\n    );\n  };\n\n  renderIcon = styles => {\n    const { name, children, iconSet } = this.props;\n    const { iconSize } = this.state;\n\n    if (children) {\n      return children;\n    }\n\n    const { color } = StyleSheet.flatten(styles.icon);\n\n    return <Icon iconSet={iconSet} name={name} color={color} size={iconSize} />;\n  };\n\n  render() {\n    const { testID } = this.props;\n\n    const styles = getStyles(this.props, this.state);\n\n    return (\n      <TouchableWithoutFeedback\n        testID={testID}\n        onPressIn={this.onPressIn}\n        onPressOut={this.onPressOut}\n      >\n        <View>\n          {this.renderRippleView(styles)}\n          <View style={styles.container}>{this.renderIcon(styles)}</View>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nIconToggle.propTypes = propTypes;\nIconToggle.defaultProps = defaultProps;\n\nexport default withTheme(IconToggle);\n"]},"metadata":{},"sourceType":"module"}