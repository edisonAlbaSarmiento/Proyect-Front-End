{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabNavigationView = function (_React$PureComponent) {\n  _inherits(TabNavigationView, _React$PureComponent);\n\n  function TabNavigationView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabNavigationView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabNavigationView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loaded: [_this.props.navigation.state.index]\n    };\n\n    _this._getLabel = function (_ref) {\n      var route = _ref.route,\n          focused = _ref.focused,\n          tintColor = _ref.tintColor;\n\n      var label = _this.props.getLabelText({\n        route: route\n      });\n\n      if (typeof label === 'function') {\n        return label({\n          focused: focused,\n          tintColor: tintColor\n        });\n      }\n\n      return label;\n    };\n\n    _this._renderTabBar = function () {\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? BottomTabBar : _this$props$tabBarCom,\n          tabBarOptions = _this$props.tabBarOptions,\n          navigation = _this$props.navigation,\n          screenProps = _this$props.screenProps,\n          getLabelText = _this$props.getLabelText,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getButtonComponent = _this$props.getButtonComponent,\n          getTestID = _this$props.getTestID,\n          renderIcon = _this$props.renderIcon,\n          onTabPress = _this$props.onTabPress;\n      var descriptors = _this.props.descriptors;\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: _this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        }\n      }));\n    };\n\n    _this._jumpTo = function (key) {\n      var _this$props2 = _this.props,\n          navigation = _this$props2.navigation,\n          onIndexChange = _this$props2.onIndexChange;\n      var index = navigation.state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n      onIndexChange(index);\n    };\n\n    return _this;\n  }\n\n  _createClass(TabNavigationView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          renderScene = _this$props3.renderScene,\n          lazy = _this$props3.lazy;\n      var routes = navigation.state.routes;\n      var loaded = this.state.loaded;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        }\n      }, React.createElement(View, {\n        style: styles.pages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }, routes.map(function (route, index) {\n        if (lazy && !loaded.includes(index)) {\n          return null;\n        }\n\n        var isFocused = navigation.state.index === index;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: [StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isFocused: isFocused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          }\n        }, renderScene({\n          route: route\n        }));\n      })), this._renderTabBar());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var index = nextProps.navigation.state.index;\n      return {\n        loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n      };\n    }\n  }]);\n\n  return TabNavigationView;\n}(React.PureComponent);\n\nTabNavigationView.defaultProps = {\n  lazy: true\n};\npolyfill(TabNavigationView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js"],"names":["React","polyfill","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","state","loaded","props","navigation","index","_getLabel","route","focused","tintColor","label","getLabelText","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getAccessibilityLabel","getButtonComponent","getTestID","renderIcon","onTabPress","descriptors","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","renderScene","lazy","styles","container","pages","map","includes","isFocused","StyleSheet","absoluteFill","opacity","nextProps","prevState","PureComponent","defaultProps","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabNavigationView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index]\n  };\n\n  _getLabel = ({ route, focused, tintColor }) => {\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getTestID,\n      renderIcon,\n      onTabPress\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} jumpTo={this._jumpTo} navigation={navigation} screenProps={screenProps} onTabPress={onTabPress} getLabelText={getLabelText} getButtonComponent={getButtonComponent} getAccessibilityLabel={getAccessibilityLabel} getTestID={getTestID} renderIcon={renderIcon} />;\n  };\n\n  _jumpTo = key => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return <View style={styles.container}>\n        <View style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = navigation.state.index === index;\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isFocused={isFocused}>\n                {renderScene({ route })}\n              </ResourceSavingScene>;\n        })}\n        </View>\n        {this._renderTabBar()}\n      </View>;\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nexport default createTabNavigator(TabNavigationView);"]},"metadata":{},"sourceType":"module"}