{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as _ from 'lodash';\nexport var INCLUDE = '@@shoutem.theme/include';\n\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  var newObjVal = objVal;\n  var include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ? [].concat(_toConsumableArray(newObjVal[INCLUDE]), _toConsumableArray(srcVal[INCLUDE])) : srcVal[INCLUDE];\n  }\n\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    var newObj = _.mergeWith({}, srcVal, function (o, s) {\n      return s;\n    });\n\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n\n    return newObj;\n  }\n\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\nexport default function resolveIncludes(target) {\n  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  function getStyle(styleName) {\n    var defaultStyle = {};\n    var style = defaultStyle;\n    var baseStyle = base[styleName];\n\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(\"Base style cannot have includes, unexpected include in \" + styleName + \".\");\n      }\n\n      style = _objectSpread({}, baseStyle);\n    }\n\n    var targetStyle = target[styleName];\n\n    if (targetStyle) {\n      style = _objectSpread({}, style, targetStyle);\n    }\n\n    if (style === defaultStyle) {\n      console.warn(\"Including unexisting style: \" + styleName);\n    }\n\n    return style;\n  }\n\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    var styleNamesToInclude = styleNode[INCLUDE];\n    var stylesToInclude = {};\n\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (var _iterator = styleNamesToInclude, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _styleName = _ref;\n\n        if (processingStyleNames.has(_styleName)) {\n          throw Error(\"Circular style include, including \" + _styleName);\n        }\n\n        processingStyleNames.add(_styleName);\n        stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(_styleName), processingStyleNames), includeSymbolMergeHandler);\n        processingStyleNames.delete(_styleName);\n      }\n    }\n\n    var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n\n    delete resultingStyle[INCLUDE];\n\n    for (var _iterator2 = _.keys(resultingStyle), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var _styleName3 = _ref2;\n      resultingStyle[_styleName3] = includeNodeStyles(resultingStyle[_styleName3], processingStyleNames);\n    }\n\n    return resultingStyle;\n  }\n\n  var processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/native-base-shoutem-theme/src/resolveIncludes.js"],"names":["_","INCLUDE","includeSymbolMergeHandler","objVal","srcVal","newObjVal","include","isUndefined","isPlainObject","newObj","mergeWith","o","s","resolveIncludes","target","base","getStyle","styleName","defaultStyle","style","baseStyle","Error","targetStyle","console","warn","includeNodeStyles","styleNode","processingStyleNames","styleNamesToInclude","stylesToInclude","isArray","has","add","delete","resultingStyle","keys","Set"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nexport const INCLUDE = '@@shoutem.theme/include';\n\n/**\n * Customizer function for lodash mergeWith which handle INCLUDE symbol.\n * Lodash merge/mergeWith functions doesn't merge symbols\n * and we use INCLUDE symbol to define which style we want to include.\n */\n// eslint-disable-next-line consistent-return\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  const newObjVal = objVal;\n  let include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ?\n      [...newObjVal[INCLUDE], ...srcVal[INCLUDE]] : srcVal[INCLUDE];\n  }\n\n  // if objVal doesn't exists create new from source\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    // Copy symbol fix.\n    // { ...srcVal } copies symbol wrong, it adds symbol value to the property defined just after it\n    // Problem example: { SYMBOL: ['Test'], someProp: 10 } => { someProp: ['Test'] }\n    // mergeWith prevents wrong copy because it doesn't iterate trough Symbols so it skips INCLUDE\n    // We do not INCLUDE symbol to be copied actually in this function\n    // because it is copied manually. This whole function is fixing Symbol problems.\n    const newObj = _.mergeWith({}, srcVal, (o, s) => s);\n    // Assigning INCLUDE after object definition to avoid Object.assign when code transpiled.\n    // Object.assign in RN uses polyfill which doesn't copy Symbols that's why INCLUDE symbol\n    // must be set manually after spread.\n    // TODO(Braco) - once Object.assign polyfill is no longer used use commented code bellow\n    // Check if `customizer` is needed still at all after polyfill is removed!\n    // return { ...srcVal, [INCLUDE]: include }; // add new lines for each property\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n    return newObj;\n  }\n\n  // otherwise let lodash default merge (return undefined)\n  // and add INCLUDE to objVal if any in srcVal\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\n/**\n * Recursively include required target styles from target and base root.\n *\n * @param target - styles object containing\n * @param base - additional style object from which target may include style\n */\nexport default function resolveIncludes(target, base = {}) {\n  /**\n   * Include process steps:\n   * 1. Iterate through target object, check if property is object and if it has [INCLUDE]\n   * 2.a. If property is object, repeat process for that object\n   * 2.b. If property is not object leave value as is\n   * 3. Include any [INCLUDE] (required style)\n   *  1. Repeat process for required style (check if it has any [INCLUDE])\n   */\n\n  /**\n   * Merges style from target and base.\n   * Target style overrides base.\n   * @param styleName - style name to include\n   */\n  function getStyle(styleName) {\n    const defaultStyle = {};\n    let style = defaultStyle;\n\n    const baseStyle = base[styleName];\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(`Base style cannot have includes, unexpected include in ${styleName}.`);\n      }\n      style = { ...baseStyle };\n    }\n\n    const targetStyle = target[styleName];\n    if (targetStyle) {\n      style = {\n        ...style,\n        ...targetStyle,\n      };\n    }\n\n    if (style === defaultStyle) {\n      console.warn(`Including unexisting style: ${styleName}`);\n    }\n\n    return style;\n  }\n\n  // Includes all styles required by using the INCLUDE symbol\n  // on the styleNode object level, and recursively calls itself\n  // for all nested style objects. After calling this function, the\n  // styleNode object will be fully processed, i.e., all styles\n  // required by this object, and any of its children will be resolved.\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    // Style names which current style node want to include\n    const styleNamesToInclude = styleNode[INCLUDE];\n\n    let stylesToInclude = {};\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (const styleName of styleNamesToInclude) {\n        if (processingStyleNames.has(styleName)) {\n          throw Error(`Circular style include, including ${styleName}`);\n        }\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith(\n          {},\n          stylesToInclude,\n          includeNodeStyles(getStyle(styleName), processingStyleNames),\n          includeSymbolMergeHandler\n        );\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    const resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n    delete resultingStyle[INCLUDE];\n\n    for (const styleName of _.keys(resultingStyle)) {\n      resultingStyle[styleName] =\n        includeNodeStyles(resultingStyle[styleName], processingStyleNames);\n    }\n    return resultingStyle;\n  }\n\n  // A that holds all style names that are currently\n  // being processed. This is used to detect include\n  // cycles.\n  const processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}\n"]},"metadata":{},"sourceType":"module"}