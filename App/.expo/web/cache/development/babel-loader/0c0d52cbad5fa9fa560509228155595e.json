{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/RippleFeedback/RippleFeedbackWeb.react.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nvar propTypes = {\n  color: PropTypes.string,\n  borderless: PropTypes.bool,\n  children: PropTypes.node.isRequired\n};\nvar defaultProps = {\n  color: null,\n  borderless: true\n};\n\nvar RippleFeedbackWeb = function (_PureComponent) {\n  _inherits(RippleFeedbackWeb, _PureComponent);\n\n  function RippleFeedbackWeb() {\n    _classCallCheck(this, RippleFeedbackWeb);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RippleFeedbackWeb).apply(this, arguments));\n  }\n\n  _createClass(RippleFeedbackWeb, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          color = _this$props.color,\n          borderless = _this$props.borderless,\n          otherProps = _objectWithoutProperties(_this$props, [\"children\", \"color\", \"borderless\"]);\n\n      return React.createElement(TouchableWithoutFeedback, _extends({}, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        }\n      }), children);\n    }\n  }]);\n\n  return RippleFeedbackWeb;\n}(PureComponent);\n\nRippleFeedbackWeb.propTypes = propTypes;\nRippleFeedbackWeb.defaultProps = defaultProps;\nexport default RippleFeedbackWeb;","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/RippleFeedback/RippleFeedbackWeb.react.js"],"names":["React","PureComponent","PropTypes","propTypes","color","string","borderless","bool","children","node","isRequired","defaultProps","RippleFeedbackWeb","props","otherProps"],"mappings":";;;;;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAIA,IAAMC,SAAS,GAAG;AAIhBC,EAAAA,KAAK,EAAEF,SAAS,CAACG,MAJD;AAKhBC,EAAAA,UAAU,EAAEJ,SAAS,CAACK,IALN;AAMhBC,EAAAA,QAAQ,EAAEN,SAAS,CAACO,IAAV,CAAeC;AANT,CAAlB;AAQA,IAAMC,YAAY,GAAG;AACnBP,EAAAA,KAAK,EAAE,IADY;AAEnBE,EAAAA,UAAU,EAAE;AAFO,CAArB;;IAKMM,iB;;;;;;;;;;;6BACK;AAAA,wBACgD,KAAKC,KADrD;AAAA,UACCL,QADD,eACCA,QADD;AAAA,UACWJ,KADX,eACWA,KADX;AAAA,UACkBE,UADlB,eACkBA,UADlB;AAAA,UACiCQ,UADjC;;AAGP,aACE,oBAAC,wBAAD,eAA8BA,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,UACGN,QADH,CADF;AAKD;;;;EAT6BP,a;;AAYhCW,iBAAiB,CAACT,SAAlB,GAA8BA,SAA9B;AACAS,iBAAiB,CAACD,YAAlB,GAAiCA,YAAjC;AAEA,eAAeC,iBAAf","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableWithoutFeedback } from 'react-native';\n/* eslint-enable import/no-unresolved, import/extensions */\n\nconst propTypes = {\n  /**\n   * The color of the underlay that will show when the touch is active.\n   */\n  color: PropTypes.string,\n  borderless: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\nconst defaultProps = {\n  color: null,\n  borderless: true,\n};\n\nclass RippleFeedbackWeb extends PureComponent {\n  render() {\n    const { children, color, borderless, ...otherProps } = this.props;\n\n    return (\n      <TouchableWithoutFeedback {...otherProps}>\n        {children}\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nRippleFeedbackWeb.propTypes = propTypes;\nRippleFeedbackWeb.defaultProps = defaultProps;\n\nexport default RippleFeedbackWeb;\n"]},"metadata":{},"sourceType":"module"}