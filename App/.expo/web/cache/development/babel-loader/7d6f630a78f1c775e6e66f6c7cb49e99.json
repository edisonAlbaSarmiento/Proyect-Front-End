{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/RightElement.react.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { ViewPropTypes } from \"../utils\";\nimport withTheme from \"../styles/withTheme\";\nimport IconToggle from \"../IconToggle\";\nimport isFunction from \"../utils/isFunction\";\nvar UIManager = NativeModules.UIManager;\nvar propTypes = {\n  rightElementTestID: PropTypes.string,\n  isSearchActive: PropTypes.bool.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  searchable: PropTypes.object,\n  style: PropTypes.shape({\n    rightElementContainer: ViewPropTypes.style,\n    rightEle: ViewPropTypes.style\n  }),\n  size: PropTypes.number,\n  rightElement: PropTypes.any,\n  onRightElementPress: PropTypes.func,\n  onSearchClearRequest: PropTypes.func.isRequired,\n  onSearchPress: PropTypes.func.isRequired,\n  iconSet: PropTypes.string\n};\nvar defaultProps = {\n  rightElementTestID: null,\n  rightElement: null,\n  onRightElementPress: null,\n  size: null,\n  style: {},\n  searchable: null,\n  iconSet: null\n};\n\nfunction getStyles(props) {\n  var isSearchActive = props.isSearchActive,\n      theme = props.theme;\n  var toolbar = theme.toolbar,\n      toolbarSearchActive = theme.toolbarSearchActive;\n  return {\n    rightElementContainer: [toolbar.rightElementContainer, isSearchActive && toolbarSearchActive.rightElementContainer, props.style.rightElementContainer],\n    rightElement: [toolbar.rightElement, isSearchActive && toolbarSearchActive.rightElement, props.style.rightElement]\n  };\n}\n\nvar RightElement = function (_PureComponent) {\n  _inherits(RightElement, _PureComponent);\n\n  function RightElement() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RightElement);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RightElement)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onMenuPressed = function (labels) {\n      var onRightElementPress = _this.props.onRightElementPress;\n      UIManager.showPopupMenu(findNodeHandle(_this.menu), labels, function () {}, function (result, index) {\n        if (onRightElementPress) {\n          onRightElementPress({\n            action: 'menu',\n            result: result,\n            index: index\n          });\n        }\n      });\n    };\n\n    _this.onSearchPressed = function () {\n      var onSearchPress = _this.props.onSearchPress;\n\n      if (isFunction(onSearchPress)) {\n        onSearchPress();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(RightElement, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          rightElementTestID = _this$props.rightElementTestID,\n          isSearchActive = _this$props.isSearchActive,\n          rightElement = _this$props.rightElement,\n          onRightElementPress = _this$props.onRightElementPress,\n          searchable = _this$props.searchable,\n          size = _this$props.size,\n          searchValue = _this$props.searchValue,\n          onSearchClearRequest = _this$props.onSearchClearRequest,\n          iconSet = _this$props.iconSet;\n      var styles = getStyles(this.props, this.context, this.state);\n\n      if (!rightElement && !searchable) {\n        return null;\n      }\n\n      var actionsMap = [];\n      var result = [];\n\n      if (rightElement) {\n        if (typeof rightElement === 'string') {\n          actionsMap.push(rightElement);\n        } else if (Array.isArray(rightElement)) {\n          actionsMap = rightElement;\n        } else if (rightElement.actions) {\n          actionsMap = rightElement.actions;\n        }\n      }\n\n      var flattenRightElement = StyleSheet.flatten(styles.rightElement);\n\n      if (actionsMap) {\n        result = actionsMap.map(function (action, index) {\n          if (React.isValidElement(action)) {\n            return action;\n          }\n\n          return React.createElement(IconToggle, {\n            key: action,\n            name: action,\n            color: flattenRightElement.color,\n            size: size,\n            style: flattenRightElement,\n            iconSet: iconSet,\n            onPress: function onPress() {\n              return onRightElementPress({\n                action: action,\n                index: index\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            }\n          });\n        });\n      }\n\n      if (React.isValidElement(rightElement)) {\n        result.push(React.cloneElement(rightElement, {\n          key: 'customRightElement'\n        }));\n      }\n\n      if (searchable) {\n        if (isSearchActive) {\n          result = [];\n\n          if (searchValue.length > 0) {\n            result.push(React.createElement(IconToggle, {\n              key: \"searchClear\",\n              name: \"clear\",\n              color: flattenRightElement.color,\n              size: size,\n              style: flattenRightElement,\n              onPress: onSearchClearRequest,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 159\n              }\n            }));\n          }\n        } else {\n          result.push(React.createElement(IconToggle, {\n            key: \"searchIcon\",\n            name: searchable.icon ? searchable.icon : 'search',\n            color: flattenRightElement.color,\n            size: size,\n            style: flattenRightElement,\n            onPress: this.onSearchPressed,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            }\n          }));\n        }\n      }\n\n      if (rightElement && rightElement.menu && !isSearchActive) {\n        var view = React.createElement(View, {\n          key: \"menuIcon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          }\n        }, React.createElement(View, {\n          ref: function ref(c) {\n            _this2.menu = c;\n          },\n          style: {\n            backgroundColor: 'transparent',\n            width: 1,\n            height: StyleSheet.hairlineWidth\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          }\n        }), React.createElement(IconToggle, {\n          name: rightElement.menu.icon || 'more-vert',\n          color: flattenRightElement.color,\n          size: size,\n          onPress: function onPress() {\n            return _this2.onMenuPressed(rightElement.menu.labels);\n          },\n          style: flattenRightElement,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          }\n        }));\n        result.push(view);\n      }\n\n      return React.createElement(View, {\n        testID: rightElementTestID,\n        style: styles.rightElementContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        }\n      }, result);\n    }\n  }]);\n\n  return RightElement;\n}(PureComponent);\n\nRightElement.propTypes = propTypes;\nRightElement.defaultProps = defaultProps;\nexport default withTheme(RightElement);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Toolbar/RightElement.react.js"],"names":["React","PureComponent","PropTypes","ViewPropTypes","withTheme","IconToggle","isFunction","UIManager","NativeModules","propTypes","rightElementTestID","string","isSearchActive","bool","isRequired","searchValue","searchable","object","style","shape","rightElementContainer","rightEle","size","number","rightElement","any","onRightElementPress","func","onSearchClearRequest","onSearchPress","iconSet","defaultProps","getStyles","props","theme","toolbar","toolbarSearchActive","RightElement","onMenuPressed","labels","showPopupMenu","findNodeHandle","menu","result","index","action","onSearchPressed","styles","context","state","actionsMap","push","Array","isArray","actions","flattenRightElement","StyleSheet","flatten","map","isValidElement","color","cloneElement","key","length","icon","view","c","backgroundColor","width","height","hairlineWidth"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, StyleSheet, NativeModules, findNodeHandle } from 'react-native';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport { ViewPropTypes } from '../utils';\n\nimport withTheme from '../styles/withTheme';\nimport IconToggle from '../IconToggle';\nimport isFunction from '../utils/isFunction';\n\nconst { UIManager } = NativeModules;\n\nconst propTypes = {\n  rightElementTestID: PropTypes.string,\n  isSearchActive: PropTypes.bool.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  // We need just check if searchable exists\n  // TODO: pass bool to this component\n  searchable: PropTypes.object, // eslint-disable-line\n  style: PropTypes.shape({\n    rightElementContainer: ViewPropTypes.style,\n    rightEle: ViewPropTypes.style,\n  }),\n  size: PropTypes.number,\n  // TODO: add shape control\n  rightElement: PropTypes.any, // eslint-disable-line\n  onRightElementPress: PropTypes.func,\n  onSearchClearRequest: PropTypes.func.isRequired,\n  onSearchPress: PropTypes.func.isRequired,\n  /**\n   * Name of Icon set that should be use. From react-native-vector-icons\n   */\n  iconSet: PropTypes.string,\n};\nconst defaultProps = {\n  rightElementTestID: null,\n  rightElement: null,\n  onRightElementPress: null,\n  size: null,\n  style: {},\n  searchable: null,\n  iconSet: null,\n};\n\nfunction getStyles(props) {\n  const { isSearchActive, theme } = props;\n  const { toolbar, toolbarSearchActive } = theme;\n\n  return {\n    rightElementContainer: [\n      toolbar.rightElementContainer,\n      isSearchActive && toolbarSearchActive.rightElementContainer,\n      props.style.rightElementContainer,\n    ],\n    rightElement: [\n      toolbar.rightElement,\n      isSearchActive && toolbarSearchActive.rightElement,\n      props.style.rightElement,\n    ],\n  };\n}\n\nclass RightElement extends PureComponent {\n  onMenuPressed = labels => {\n    const { onRightElementPress } = this.props;\n\n    UIManager.showPopupMenu(\n      findNodeHandle(this.menu),\n      labels,\n      () => {},\n      (result, index) => {\n        if (onRightElementPress) {\n          onRightElementPress({ action: 'menu', result, index });\n        }\n      },\n    );\n  };\n\n  onSearchPressed = () => {\n    const { onSearchPress } = this.props;\n\n    if (isFunction(onSearchPress)) {\n      onSearchPress();\n    }\n  };\n\n  render() {\n    const {\n      rightElementTestID,\n      isSearchActive,\n      rightElement,\n      onRightElementPress,\n      searchable,\n      size,\n      searchValue,\n      onSearchClearRequest,\n      iconSet,\n    } = this.props;\n\n    const styles = getStyles(this.props, this.context, this.state);\n\n    // if there is no rightElement and searchable feature is off then we are sure on the right\n    // is nothing\n    if (!rightElement && !searchable) {\n      return null;\n    }\n\n    let actionsMap = [];\n    let result = [];\n\n    if (rightElement) {\n      if (typeof rightElement === 'string') {\n        actionsMap.push(rightElement);\n      } else if (Array.isArray(rightElement)) {\n        actionsMap = rightElement;\n      } else if (rightElement.actions) {\n        actionsMap = rightElement.actions;\n      }\n    }\n\n    const flattenRightElement = StyleSheet.flatten(styles.rightElement);\n\n    if (actionsMap) {\n      result = actionsMap.map((action, index) => {\n        if (React.isValidElement(action)) {\n          return action;\n        }\n\n        return (\n          <IconToggle\n            key={action}\n            name={action}\n            color={flattenRightElement.color}\n            size={size}\n            style={flattenRightElement}\n            iconSet={iconSet}\n            onPress={() => onRightElementPress({ action, index })}\n          />\n        );\n      });\n    }\n\n    if (React.isValidElement(rightElement)) {\n      result.push(\n        React.cloneElement(rightElement, { key: 'customRightElement' }),\n      );\n    }\n\n    // if searchable feature is on and search is active with some text, then we show clear\n    // button, to be able to clear text\n    if (searchable) {\n      if (isSearchActive) {\n        // clear result to hide other icons\n        result = [];\n\n        if (searchValue.length > 0) {\n          result.push(\n            <IconToggle\n              key=\"searchClear\"\n              name=\"clear\"\n              color={flattenRightElement.color}\n              size={size}\n              style={flattenRightElement}\n              onPress={onSearchClearRequest}\n            />,\n          );\n        }\n      } else {\n        result.push(\n          <IconToggle\n            key=\"searchIcon\"\n            name={searchable.icon ? searchable.icon : 'search'}\n            color={flattenRightElement.color}\n            size={size}\n            style={flattenRightElement}\n            onPress={this.onSearchPressed}\n          />,\n        );\n      }\n    }\n\n    if (rightElement && rightElement.menu && !isSearchActive) {\n      const view = (\n        <View key=\"menuIcon\">\n          {/* We need this view as an anchor for drop down menu. findNodeHandle can\n                        find just view with width and height, even it needs backgroundColor :/\n                    */}\n          <View\n            ref={c => {\n              this.menu = c;\n            }}\n            style={{\n              backgroundColor: 'transparent',\n              width: 1,\n              height: StyleSheet.hairlineWidth,\n            }}\n          />\n          <IconToggle\n            name={rightElement.menu.icon || 'more-vert'}\n            color={flattenRightElement.color}\n            size={size}\n            onPress={() => this.onMenuPressed(rightElement.menu.labels)}\n            style={flattenRightElement}\n          />\n        </View>\n      );\n\n      result.push(view);\n    }\n\n    return (\n      <View testID={rightElementTestID} style={styles.rightElementContainer}>\n        {result}\n      </View>\n    );\n  }\n}\n\nRightElement.propTypes = propTypes;\nRightElement.defaultProps = defaultProps;\n\nexport default withTheme(RightElement);\n"]},"metadata":{},"sourceType":"module"}