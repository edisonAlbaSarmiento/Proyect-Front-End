{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js\";\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar MaterialTabView = function (_React$PureComponent) {\n  _inherits(MaterialTabView, _React$PureComponent);\n\n  function MaterialTabView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MaterialTabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MaterialTabView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this._getLabel = function (_ref) {\n      var route = _ref.route,\n          tintColor = _ref.tintColor,\n          focused = _ref.focused;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _this._renderIcon = function (_ref2) {\n      var focused = _ref2.focused,\n          route = _ref2.route,\n          tintColor = _ref2.tintColor;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? MaterialTopTabBar : _this$props$tabBarCom,\n          tabBarPosition = _this$props.tabBarPosition,\n          tabBarOptions = _this$props.tabBarOptions;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        getLabelText: _this.props.getLabelText,\n        getAccessibilityLabel: _this.props.getAccessibilityLabel,\n        getTestID: _this.props.getTestID,\n        renderIcon: _this._renderIcon,\n        onTabPress: _this.props.onTabPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        }\n      }));\n    };\n\n    _this._renderPanPager = function (props) {\n      return React.createElement(PagerPan, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        }\n      }));\n    };\n\n    _this._renderScene = function (_ref3) {\n      var route = _ref3.route;\n      var _this$props2 = _this.props,\n          renderScene = _this$props2.renderScene,\n          animationEnabled = _this$props2.animationEnabled,\n          swipeEnabled = _this$props2.swipeEnabled,\n          descriptors = _this$props2.descriptors;\n\n      if (animationEnabled === false && swipeEnabled === false) {\n        var navigation = descriptors[route.key].navigation;\n        return React.createElement(ResourceSavingScene, {\n          isFocused: navigation.isFocused(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          }\n        }, renderScene({\n          route: route\n        }));\n      }\n\n      return renderScene({\n        route: route\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MaterialTabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          animationEnabled = _this$props3.animationEnabled,\n          renderScene = _this$props3.renderScene,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"animationEnabled\", \"renderScene\"]);\n\n      var renderPager;\n      var state = this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      if (animationEnabled === false && swipeEnabled === false) {\n        renderPager = this._renderPanPager;\n      }\n\n      return React.createElement(TabView, _extends({}, rest, {\n        navigationState: navigation.state,\n        animationEnabled: animationEnabled,\n        swipeEnabled: swipeEnabled,\n        renderPager: renderPager,\n        renderTabBar: this._renderTabBar,\n        renderScene: this._renderScene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }));\n    }\n  }]);\n\n  return MaterialTabView;\n}(React.PureComponent);\n\nMaterialTabView.defaultProps = {\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  })\n};\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js"],"names":["React","TabView","PagerPan","createTabNavigator","MaterialTopTabBar","ResourceSavingScene","MaterialTabView","_getLabel","route","tintColor","focused","descriptors","props","descriptor","key","options","tabBarLabel","title","routeName","_renderIcon","tabBarIcon","_renderTabBar","state","navigation","routes","index","tabBarVisible","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getTestID","onTabPress","_renderPanPager","_renderScene","renderScene","animationEnabled","swipeEnabled","isFocused","rest","renderPager","PureComponent","defaultProps","initialLayout","Platform","select","android","width","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass MaterialTabView extends React.PureComponent {\n  static defaultProps = {\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 }\n    })\n  };\n\n  _getLabel = ({ route, tintColor, focused }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({ tintColor, focused }) : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ tintColor, focused }) : options.tabBarIcon;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      /* $FlowFixMe */\n      <TabBarComponent {...tabBarOptions} {...props} tabBarPosition={tabBarPosition} screenProps={this.props.screenProps} navigation={this.props.navigation} getLabelText={this.props.getLabelText} getAccessibilityLabel={this.props.getAccessibilityLabel} getTestID={this.props.getTestID} renderIcon={this._renderIcon} onTabPress={this.props.onTabPress} />\n    );\n  };\n\n  _renderPanPager = props => <PagerPan {...props} />;\n\n  _renderScene = ({ route }) => {\n    const {\n      renderScene,\n      animationEnabled,\n      swipeEnabled,\n      descriptors\n    } = this.props;\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      const { navigation } = descriptors[route.key];\n\n      return <ResourceSavingScene isFocused={navigation.isFocused()}>\n          {renderScene({ route })}\n        </ResourceSavingScene>;\n    }\n\n    return renderScene({ route });\n  };\n\n  render() {\n    const {\n      navigation,\n      animationEnabled,\n      // eslint-disable-next-line no-unused-vars\n      renderScene,\n      ...rest\n    } = this.props;\n\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return <TabView {...rest} navigationState={navigation.state} animationEnabled={animationEnabled} swipeEnabled={swipeEnabled} renderPager={renderPager} renderTabBar={this._renderTabBar} renderScene={\n    /* $FlowFixMe */\n    this._renderScene} />;\n  }\n}\n\nexport default createTabNavigator(MaterialTabView);"]},"metadata":{},"sourceType":"module"}