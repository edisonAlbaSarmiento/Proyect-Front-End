{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Avatar/Avatar.react.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPropTypes } from \"../utils\";\nimport Icon from \"../Icon\";\nimport withTheme from \"../styles/withTheme\";\nvar propTypes = {\n  image: PropTypes.element,\n  icon: PropTypes.string,\n  iconColor: PropTypes.string,\n  iconSize: PropTypes.number,\n  text: PropTypes.string,\n  size: PropTypes.number,\n  style: PropTypes.shape({\n    container: ViewPropTypes.style,\n    content: Text.propTypes.style\n  }),\n  iconSet: PropTypes.string,\n  theme: PropTypes.any\n};\nvar defaultProps = {\n  image: null,\n  icon: null,\n  iconColor: null,\n  iconSize: null,\n  text: null,\n  size: 48,\n  style: {},\n  iconSet: null\n};\n\nfunction getStyles(props) {\n  var size = props.size,\n      theme = props.theme;\n  var avatar = theme.avatar;\n  var local = {};\n\n  if (size) {\n    local.container = {\n      height: size,\n      width: size,\n      borderRadius: size / 2\n    };\n  }\n\n  return {\n    container: [avatar.container, local.container, props.style.container],\n    content: [avatar.content, local.content, props.style.content]\n  };\n}\n\nvar Avatar = function (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  function Avatar() {\n    _classCallCheck(this, Avatar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Avatar).apply(this, arguments));\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          image = _this$props.image,\n          icon = _this$props.icon,\n          iconSet = _this$props.iconSet,\n          iconSize = _this$props.iconSize,\n          iconColor = _this$props.iconColor,\n          text = _this$props.text,\n          theme = _this$props.theme;\n      var avatar = theme.avatar,\n          spacing = theme.spacing;\n      var content = null;\n      var styles = getStyles(this.props);\n\n      if (icon) {\n        var color = iconColor || StyleSheet.flatten(avatar.content).color;\n        var size = iconSize || spacing.iconSize;\n        content = React.createElement(Icon, {\n          iconSet: iconSet,\n          name: icon,\n          color: color,\n          size: size,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          }\n        });\n      } else if (text) {\n        content = React.createElement(Text, {\n          style: styles.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          }\n        }, text);\n      } else if (image) {\n        content = image;\n      }\n\n      return React.createElement(View, {\n        style: {\n          flexGrow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }, content));\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\nAvatar.propTypes = propTypes;\nAvatar.defaultProps = defaultProps;\nexport default withTheme(Avatar);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Avatar/Avatar.react.js"],"names":["React","PureComponent","PropTypes","ViewPropTypes","Icon","withTheme","propTypes","image","element","icon","string","iconColor","iconSize","number","text","size","style","shape","container","content","Text","iconSet","theme","any","defaultProps","getStyles","props","avatar","local","height","width","borderRadius","Avatar","spacing","styles","color","StyleSheet","flatten","flexGrow"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { ViewPropTypes } from '../utils';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport Icon from '../Icon';\nimport withTheme from '../styles/withTheme';\n\nconst propTypes = {\n  /**\n   * If passed in, this component will render image.\n   */\n  image: PropTypes.element,\n  /**\n   * If passed in, this component will render icon element inside avatar.\n   */\n  icon: PropTypes.string,\n  /**\n   * If passed in, this component will render an icon with this color.\n   */\n  iconColor: PropTypes.string,\n  /**\n   * If passed in, this component will render an icon with this size.\n   */\n  iconSize: PropTypes.number,\n  /**\n   * If passed in, this component will render text element inside avatar.\n   */\n  text: PropTypes.string,\n  /**\n   * It's just sugar for: style: { width: size, height: size, borderRadius: size / 2 }\n   */\n  size: PropTypes.number,\n  /**\n   * Inline style of avatar\n   */\n  style: PropTypes.shape({\n    container: ViewPropTypes.style,\n    content: Text.propTypes.style, // eslint-disable-line\n  }),\n  iconSet: PropTypes.string,\n  /**\n   * Theme\n   */\n  theme: PropTypes.any, // eslint-disable-line\n};\nconst defaultProps = {\n  image: null,\n  icon: null,\n  iconColor: null,\n  iconSize: null,\n  text: null,\n  size: 48,\n  style: {},\n  iconSet: null,\n};\n\nfunction getStyles(props) {\n  const { size, theme } = props;\n  const { avatar } = theme;\n\n  const local = {};\n\n  if (size) {\n    local.container = {\n      height: size,\n      width: size,\n      borderRadius: size / 2,\n    };\n  }\n\n  return {\n    container: [avatar.container, local.container, props.style.container],\n    content: [avatar.content, local.content, props.style.content],\n  };\n}\n\nclass Avatar extends PureComponent {\n  render() {\n    const {\n      image,\n      icon,\n      iconSet,\n      iconSize,\n      iconColor,\n      text,\n      theme,\n    } = this.props;\n    const { avatar, spacing } = theme;\n\n    let content = null;\n\n    const styles = getStyles(this.props);\n\n    if (icon) {\n      const color = iconColor || StyleSheet.flatten(avatar.content).color;\n      const size = iconSize || spacing.iconSize;\n      content = (\n        <Icon iconSet={iconSet} name={icon} color={color} size={size} />\n      );\n    } else if (text) {\n      content = <Text style={styles.content}>{text}</Text>;\n    } else if (image) {\n      content = image;\n    }\n\n    return (\n      <View style={{ flexGrow: 1 }}>\n        <View style={styles.container}>{content}</View>\n      </View>\n    );\n  }\n}\n\nAvatar.propTypes = propTypes;\nAvatar.defaultProps = defaultProps;\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"module"}