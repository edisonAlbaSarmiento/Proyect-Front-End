{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport { PERC_SUPPORTED_STYLES, STYLESETS, ABSOLUTE_FONT_SIZE, stylePropTypes } from \"./HTMLUtils\";\nimport { generateDefaultBlockStyles, generateDefaultTextStyles } from \"./HTMLDefaultStyles\";\nexport function cssStringToObject(str) {\n  return str.split(';').map(function (prop) {\n    return prop.split(':');\n  }).reduce(function (acc, prop) {\n    if (prop.length === 2) {\n      acc[prop[0].trim()] = prop[1].trim();\n    }\n\n    return acc;\n  }, {});\n}\nexport function cssObjectToString(obj) {\n  var string = '';\n  Object.keys(obj).forEach(function (style) {\n    string += style + \":\" + obj[style] + \";\";\n  });\n  return string;\n}\nexport function _constructStyles(_ref) {\n  var tagName = _ref.tagName,\n      htmlAttribs = _ref.htmlAttribs,\n      passProps = _ref.passProps,\n      additionalStyles = _ref.additionalStyles,\n      _ref$styleSet = _ref.styleSet,\n      styleSet = _ref$styleSet === void 0 ? 'VIEW' : _ref$styleSet,\n      baseFontSize = _ref.baseFontSize;\n  var defaultTextStyles = generateDefaultTextStyles(baseFontSize);\n  var defaultBlockStyles = generateDefaultBlockStyles(baseFontSize);\n  passProps.ignoredStyles.forEach(function (ignoredStyle) {\n    htmlAttribs[ignoredStyle] && delete htmlAttribs[ignoredStyle];\n  });\n  var style = [(styleSet === 'VIEW' ? defaultBlockStyles : defaultTextStyles)[tagName], passProps.tagsStyles ? passProps.tagsStyles[tagName] : undefined, _getElementClassStyles(htmlAttribs, passProps.classesStyles), htmlAttribs.style ? cssStringToRNStyle(htmlAttribs.style, STYLESETS[styleSet], _objectSpread({}, passProps, {\n    parentTag: tagName\n  })) : undefined];\n\n  if (additionalStyles) {\n    style = style.concat(!additionalStyles.length ? [additionalStyles] : additionalStyles);\n  }\n\n  return style.filter(function (style) {\n    return style !== undefined;\n  });\n}\nexport function computeTextStyles(element, passProps) {\n  var finalStyle = {};\n\n  var parentStyles = _recursivelyComputeParentTextStyles(element, passProps);\n\n  parentStyles.forEach(function (styles) {\n    Object.keys(styles).forEach(function (styleKey) {\n      var styleValue = styles[styleKey];\n\n      if (!finalStyle[styleKey]) {\n        finalStyle[styleKey] = styleValue;\n      }\n    });\n  });\n  return _objectSpread({}, passProps.baseFontStyle, finalStyle);\n}\n\nfunction _recursivelyComputeParentTextStyles(element, passProps) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var attribs = element.attribs,\n      name = element.name;\n  var classesStyles = passProps.classesStyles,\n      tagsStyles = passProps.tagsStyles,\n      defaultTextStyles = passProps.defaultTextStyles;\n  var HTMLAttribsStyles = attribs && attribs.style ? cssStringToRNStyle(attribs.style, STYLESETS.TEXT, passProps) : {};\n\n  var classStyles = _getElementClassStyles(attribs, classesStyles);\n\n  var userTagStyles = tagsStyles[name];\n  var defaultTagStyles = defaultTextStyles[name];\n\n  var mergedStyles = _objectSpread({}, defaultTagStyles, userTagStyles, classStyles, HTMLAttribsStyles);\n\n  styles.push(mergedStyles);\n\n  if (element.parent) {\n    return _recursivelyComputeParentTextStyles(element.parent, passProps, styles);\n  } else {\n    return styles;\n  }\n}\n\nexport function _getElementClassStyles(htmlAttribs) {\n  var classesStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var elementClasses = _getElementCSSClasses(htmlAttribs);\n\n  var styles = {};\n  elementClasses.forEach(function (className) {\n    if (classesStyles[className]) {\n      styles = _objectSpread({}, styles, classesStyles[className]);\n    }\n  });\n  return styles;\n}\nexport function _getElementCSSClasses(htmlAttribs) {\n  if (!htmlAttribs || !htmlAttribs.class) {\n    return [];\n  }\n\n  return htmlAttribs.class.split(' ');\n}\n\nfunction cssToRNStyle(css, styleset, _ref2) {\n  var emSize = _ref2.emSize,\n      ptSize = _ref2.ptSize,\n      ignoredStyles = _ref2.ignoredStyles,\n      allowedStyles = _ref2.allowedStyles;\n  var styleProps = stylePropTypes[styleset];\n  return Object.keys(css).filter(function (key) {\n    return allowedStyles ? allowedStyles.indexOf(key) !== -1 : true;\n  }).filter(function (key) {\n    return (ignoredStyles || []).indexOf(key) === -1;\n  }).map(function (key) {\n    return [key, css[key]];\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n\n    return [key.split('-').map(function (item, index) {\n      return index === 0 ? item : item[0].toUpperCase() + item.substr(1);\n    }).join(''), value];\n  }).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n\n    if (styleProps.indexOf(key) === -1) {\n      return undefined;\n    }\n\n    if (typeof value === 'string') {\n      if (value.search('inherit') !== -1 || value.search('calc') !== -1 || value.search('normal') !== -1) {\n        return undefined;\n      }\n\n      value = value.replace('!important', '');\n\n      if (value.search('%') !== -1 && PERC_SUPPORTED_STYLES.indexOf(key) !== -1) {\n        return [key, value];\n      }\n\n      if (value.search('em') !== -1) {\n        var pxSize = parseFloat(value.replace('em', '')) * emSize;\n        return [key, pxSize];\n      }\n\n      if (value.search('pt') !== -1) {\n        var _pxSize = parseFloat(value.replace('pt', '')) * ptSize;\n\n        return [key, _pxSize];\n      }\n\n      var numericValue = parseFloat(value.replace('px', ''));\n\n      if (key !== 'fontWeight' && !isNaN(numericValue)) {\n        if (styleProps.indexOf(key) !== -1) {\n          return [key, numericValue];\n        }\n      }\n\n      if (key === 'fontSize') {\n        return mapAbsoluteFontSize(key, value);\n      }\n    }\n\n    return [key, value];\n  }).filter(function (prop) {\n    return prop !== undefined;\n  }).reduce(function (acc, _ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        key = _ref8[0],\n        value = _ref8[1];\n\n    acc[key] = value;\n    return acc;\n  }, {});\n}\n\nfunction mapAbsoluteFontSize(key, value) {\n  var fontSize = value;\n\n  if (ABSOLUTE_FONT_SIZE.hasOwnProperty(value)) {\n    fontSize = ABSOLUTE_FONT_SIZE[value];\n  }\n\n  return [key, fontSize];\n}\n\nexport function cssStringToRNStyle(str) {\n  var styleset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STYLESETS.TEXT;\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  return cssToRNStyle(cssStringToObject(str), styleset, options);\n}","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-render-html/src/HTMLStyles.js"],"names":["PERC_SUPPORTED_STYLES","STYLESETS","ABSOLUTE_FONT_SIZE","stylePropTypes","generateDefaultBlockStyles","generateDefaultTextStyles","cssStringToObject","str","split","map","prop","reduce","acc","length","trim","cssObjectToString","obj","string","Object","keys","forEach","style","_constructStyles","tagName","htmlAttribs","passProps","additionalStyles","styleSet","baseFontSize","defaultTextStyles","defaultBlockStyles","ignoredStyles","ignoredStyle","tagsStyles","undefined","_getElementClassStyles","classesStyles","cssStringToRNStyle","parentTag","concat","filter","computeTextStyles","element","finalStyle","parentStyles","_recursivelyComputeParentTextStyles","styles","styleKey","styleValue","baseFontStyle","attribs","name","HTMLAttribsStyles","TEXT","classStyles","userTagStyles","defaultTagStyles","mergedStyles","push","parent","elementClasses","_getElementCSSClasses","className","class","cssToRNStyle","css","styleset","emSize","ptSize","allowedStyles","styleProps","key","indexOf","value","item","index","toUpperCase","substr","join","search","replace","pxSize","parseFloat","numericValue","isNaN","mapAbsoluteFontSize","fontSize","hasOwnProperty","options"],"mappings":"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","sourcesContent":["import { PERC_SUPPORTED_STYLES, STYLESETS, ABSOLUTE_FONT_SIZE, stylePropTypes } from './HTMLUtils';\nimport { generateDefaultBlockStyles, generateDefaultTextStyles } from './HTMLDefaultStyles';\n\n/**\n* Converts a html style string to an object\n* @param str: the style string\n* @return the style as an obect\n*/\nexport function cssStringToObject (str) {\n    return str\n        .split(';')\n        .map((prop) => prop.split(':'))\n        .reduce((acc, prop) => {\n            if (prop.length === 2) {\n                acc[prop[0].trim()] = prop[1].trim();\n            }\n            return acc;\n        }, {});\n}\n\nexport function cssObjectToString (obj) {\n    let string = '';\n    Object.keys(obj).forEach((style) => {\n        string += `${style}:${obj[style]};`;\n    });\n    return string;\n}\n\n/**\n * Helper that composes styles with the default style for a tag, the \"style\" attribute and\n * any given addiitional style. Checks everything against the style sets of views, images,\n * or texts with prop-types.\n * @export\n * @param {any} { tagName, htmlAttribs, passProps, additionalStyles, styleSet = 'VIEW' }\n * @returns {object}\n */\nexport function _constructStyles ({ tagName, htmlAttribs, passProps, additionalStyles, styleSet = 'VIEW', baseFontSize }) {\n    let defaultTextStyles = generateDefaultTextStyles(baseFontSize);\n    let defaultBlockStyles = generateDefaultBlockStyles(baseFontSize);\n\n    passProps.ignoredStyles.forEach((ignoredStyle) => {\n        htmlAttribs[ignoredStyle] && delete htmlAttribs[ignoredStyle];\n    });\n\n    let style = [\n        (styleSet === 'VIEW' ? defaultBlockStyles : defaultTextStyles)[tagName],\n        passProps.tagsStyles ? passProps.tagsStyles[tagName] : undefined,\n        _getElementClassStyles(htmlAttribs, passProps.classesStyles),\n        htmlAttribs.style ?\n            cssStringToRNStyle(\n                htmlAttribs.style,\n                STYLESETS[styleSet],\n                { ...passProps, parentTag: tagName }\n            ) :\n            undefined\n    ];\n\n    if (additionalStyles) {\n        style = style.concat(!additionalStyles.length ? [additionalStyles] : additionalStyles);\n    }\n\n    return style.filter((style) => style !== undefined);\n}\n\n/**\n * Computes the styles of a text node\n * @export\n * @param {any} element parsed DOM node of text\n * @param {any} passProps set of props from the HTML component\n * @returns {object} react-native styles\n */\nexport function computeTextStyles (element, passProps) {\n    let finalStyle = {};\n\n    // Construct an array with the styles of each level of the text node, ie :\n    // [element, parent1, parent2, parent3...]\n    const parentStyles = _recursivelyComputeParentTextStyles(element, passProps);\n\n    // Only merge the keys that aren't yet applied to the final object. ie:\n    // if fontSize is already set in the first iteration, ignore the fontSize that\n    // we got from the 3rd iteration because of a class for instance, hence\n    // respecting the proper style inheritance\n    parentStyles.forEach((styles) => {\n        Object.keys(styles).forEach((styleKey) => {\n            const styleValue = styles[styleKey];\n            if (!finalStyle[styleKey]) {\n                finalStyle[styleKey] = styleValue;\n            }\n        });\n    });\n\n    // Finally, try to add the baseFontStyle values to add pontentially missing\n    // styles to each text node\n    return { ...passProps.baseFontStyle, ...finalStyle };\n}\n\nfunction _recursivelyComputeParentTextStyles (element, passProps, styles = []) {\n    const { attribs, name } = element;\n    const { classesStyles, tagsStyles, defaultTextStyles } = passProps;\n\n    // Construct every style for this node\n    const HTMLAttribsStyles = attribs && attribs.style ? cssStringToRNStyle(attribs.style, STYLESETS.TEXT, passProps) : {};\n    const classStyles = _getElementClassStyles(attribs, classesStyles);\n    const userTagStyles = tagsStyles[name];\n    const defaultTagStyles = defaultTextStyles[name];\n\n    // Merge those according to their priority level\n    const mergedStyles = {\n        ...defaultTagStyles,\n        ...userTagStyles,\n        ...classStyles,\n        ...HTMLAttribsStyles\n    };\n\n    styles.push(mergedStyles);\n\n    if (element.parent) {\n        // Keep looping recursively if this node has parents\n        return _recursivelyComputeParentTextStyles(element.parent, passProps, styles);\n    } else {\n        return styles;\n    }\n}\n\n/**\n * Creates a set of style from an array of classes asosciated to a node.\n * @export\n * @param {any} htmlAttribs\n * @param {any} [classesStyles={}]\n * @returns {object}\n */\nexport function _getElementClassStyles (htmlAttribs, classesStyles = {}) {\n    const elementClasses = _getElementCSSClasses(htmlAttribs);\n    let styles = {};\n    elementClasses.forEach((className) => {\n        if (classesStyles[className]) {\n            styles = { ...styles, ...classesStyles[className] };\n        }\n    });\n    return styles;\n}\n\n/**\n * Simple helper that returns an array of classes of a node.\n * @export\n * @param {any} htmlAttribs\n * @returns {array}\n */\nexport function _getElementCSSClasses (htmlAttribs) {\n    if (!htmlAttribs || !htmlAttribs.class) {\n        return [];\n    }\n    return htmlAttribs.class.split(' ');\n}\n\n/**\n * Converts a html style to its equavalent react native style\n * @param {object} css: object of key value css strings\n * @param {string} styleset: the styleset to convert the styles against\n * @param {object} { parentTag, emSize, ignoredStyles }\n * @returns {object}\n */\nfunction cssToRNStyle (css, styleset, { emSize, ptSize, ignoredStyles, allowedStyles }) {\n    const styleProps = stylePropTypes[styleset];\n    return Object.keys(css)\n        .filter((key) => allowedStyles ? allowedStyles.indexOf(key) !== -1 : true)\n        .filter((key) => (ignoredStyles || []).indexOf(key) === -1)\n        .map((key) => [key, css[key]])\n        .map(([key, value]) => {\n            // Key convert\n            return [\n                key\n                    .split('-')\n                    .map((item, index) => index === 0 ? item : item[0].toUpperCase() + item.substr(1))\n                    .join(''),\n                value\n            ];\n        })\n        .map(([key, value]) => {\n            if (styleProps.indexOf(key) === -1) {\n                return undefined;\n            }\n\n            if (typeof value === 'string') {\n                if (value.search('inherit') !== -1 || value.search('calc') !== -1 || value.search('normal') !== -1) {\n                    return undefined;\n                }\n                value = value.replace('!important', '');\n                // See if we can use the percentage directly\n                if (value.search('%') !== -1 && PERC_SUPPORTED_STYLES.indexOf(key) !== -1) {\n                    return [key, value];\n                }\n                if (value.search('em') !== -1) {\n                    const pxSize = parseFloat(value.replace('em', '')) * emSize;\n                    return [key, pxSize];\n                }\n                if (value.search('pt') !== -1) {\n                    const pxSize = parseFloat(value.replace('pt', '')) * ptSize;\n                    return [key, pxSize];\n                }\n                // See if we can convert a 20px to a 20 automagically\n                const numericValue = parseFloat(value.replace('px', ''));\n                if (key !== 'fontWeight' && !isNaN(numericValue)) {\n                    if (styleProps.indexOf(key) !== -1) {\n                        return [key, numericValue];\n                    }\n                }\n                if (key === 'fontSize') {\n                    return mapAbsoluteFontSize(key, value);\n                }\n            }\n            return [key, value];\n        })\n        .filter((prop) => prop !== undefined)\n        .reduce((acc, [key, value]) => {\n            acc[key] = value;\n            return acc;\n        }, {});\n}\n\n/**\n* @param {string} key: the key of style\n* @param {string} value: the value of style\n* @return {array}\n*/\nfunction mapAbsoluteFontSize (key, value) {\n    let fontSize = value;\n    if (ABSOLUTE_FONT_SIZE.hasOwnProperty(value)) {\n        fontSize = ABSOLUTE_FONT_SIZE[value];\n    }\n    return [key, fontSize];\n}\n\n/**\n* @param str: the css style string\n* @param styleset=STYLESETS.TEXT: the styleset to convert the styles against\n* @return a react native style object\n*/\nexport function cssStringToRNStyle (str, styleset = STYLESETS.TEXT, options) {\n    return cssToRNStyle(cssStringToObject(str), styleset, options);\n}\n"]},"metadata":{},"sourceType":"module"}