{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Badge/Badge.react.js\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from \"../Icon\";\nimport { ViewPropTypes } from \"../utils\";\nimport withTheme from \"../styles/withTheme\";\nvar propTypes = {\n  children: PropTypes.node,\n  text: PropTypes.string,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    name: PropTypes.string,\n    color: PropTypes.string,\n    size: PropTypes.number\n  })]),\n  size: PropTypes.number,\n  stroke: PropTypes.number,\n  style: PropTypes.oneOfType([PropTypes.shape({\n    container: ViewPropTypes.style,\n    strokeContainer: ViewPropTypes.style,\n    content: Text.propTypes.style\n  }), PropTypes.array])\n};\nvar defaultProps = {\n  children: null,\n  text: null,\n  icon: null,\n  size: 16,\n  stroke: null,\n  style: {\n    container: {\n      top: -8,\n      right: -8\n    }\n  }\n};\n\nfunction getStyles(props) {\n  var accent = props.accent,\n      size = props.size,\n      stroke = props.stroke,\n      theme = props.theme;\n  var badge = theme.badge,\n      palette = theme.palette;\n  var local = {\n    container: {},\n    strokeContainer: {}\n  };\n\n  if (size && stroke) {\n    var strokeSize = size;\n    var contentSize = size - stroke;\n    local.strokeContainer.width = strokeSize;\n    local.strokeContainer.height = strokeSize;\n    local.strokeContainer.borderRadius = strokeSize / 2;\n    local.container.position = null;\n    local.container.width = contentSize;\n    local.container.height = contentSize;\n    local.container.borderRadius = contentSize / 2;\n  } else if (size && !stroke) {\n    local.container.width = size;\n    local.container.height = size;\n    local.container.borderRadius = size / 2;\n  }\n\n  if (accent) {\n    local.container.backgroundColor = palette.accentColor;\n  }\n\n  return {\n    container: [badge.container, local.container, props.style.container],\n    strokeContainer: [badge.strokeContainer, local.strokeContainer, props.style.strokeContainer],\n    content: [badge.content, local.content, props.style.content]\n  };\n}\n\nvar mapIconProps = function mapIconProps(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size;\n  var iconProps = {};\n\n  if (typeof icon === 'string') {\n    iconProps.name = icon;\n  } else {\n    iconProps = icon;\n  }\n\n  if (!iconProps.size && size) {\n    iconProps.size = size / 2;\n  }\n\n  return iconProps;\n};\n\nvar Badge = function (_PureComponent) {\n  _inherits(Badge, _PureComponent);\n\n  function Badge(props, context) {\n    var _this;\n\n    _classCallCheck(this, Badge);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Badge).call(this, props, context));\n    _this.renderContent = _this.renderContent.bind(_assertThisInitialized(_this));\n    _this.renderChildren = _this.renderChildren.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Badge, [{\n    key: \"renderContent\",\n    value: function renderContent(styles) {\n      var _this$props = this.props,\n          text = _this$props.text,\n          icon = _this$props.icon,\n          stroke = _this$props.stroke;\n      var content = null;\n\n      if (icon) {\n        var iconProps = mapIconProps(this.props);\n        content = React.createElement(Icon, _extends({}, iconProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          }\n        }));\n      } else if (text) {\n        content = React.createElement(Text, {\n          style: styles.content,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, text);\n      }\n\n      var contentWrapper = React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        }\n      }, content);\n\n      if (!stroke) {\n        return contentWrapper;\n      }\n\n      return React.createElement(View, {\n        style: styles.strokeContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        }\n      }, contentWrapper);\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var children = this.props.children;\n\n      if (!children) {\n        return null;\n      }\n\n      return children;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var styles = getStyles(this.props);\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        }\n      }, this.renderChildren(), this.renderContent(styles));\n    }\n  }]);\n\n  return Badge;\n}(PureComponent);\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default withTheme(Badge);","map":{"version":3,"sources":["/Users/edisonalba/Desktop/Proyect-University/App/node_modules/react-native-material-ui/src/Badge/Badge.react.js"],"names":["React","PureComponent","PropTypes","Icon","ViewPropTypes","withTheme","propTypes","children","node","text","string","icon","oneOfType","shape","name","color","size","number","stroke","style","container","strokeContainer","content","Text","array","defaultProps","top","right","getStyles","props","accent","theme","badge","palette","local","strokeSize","contentSize","width","height","borderRadius","position","backgroundColor","accentColor","mapIconProps","iconProps","Badge","context","renderContent","bind","renderChildren","styles","contentWrapper","flexDirection"],"mappings":";;;;;;;;;;AAEA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,IAAP;AACA,SAASC,aAAT;AACA,OAAOC,SAAP;AAEA,IAAMC,SAAS,GAAG;AAIhBC,EAAAA,QAAQ,EAAEL,SAAS,CAACM,IAJJ;AAQhBC,EAAAA,IAAI,EAAEP,SAAS,CAACQ,MARA;AAYhBC,EAAAA,IAAI,EAAET,SAAS,CAACU,SAAV,CAAoB,CACxBV,SAAS,CAACQ,MADc,EAExBR,SAAS,CAACW,KAAV,CAAgB;AACdC,IAAAA,IAAI,EAAEZ,SAAS,CAACQ,MADF;AAEdK,IAAAA,KAAK,EAAEb,SAAS,CAACQ,MAFH;AAGdM,IAAAA,IAAI,EAAEd,SAAS,CAACe;AAHF,GAAhB,CAFwB,CAApB,CAZU;AAuBhBD,EAAAA,IAAI,EAAEd,SAAS,CAACe,MAvBA;AA8BhBC,EAAAA,MAAM,EAAEhB,SAAS,CAACe,MA9BF;AA+BhBE,EAAAA,KAAK,EAAEjB,SAAS,CAACU,SAAV,CAAoB,CACzBV,SAAS,CAACW,KAAV,CAAgB;AACdO,IAAAA,SAAS,EAAEhB,aAAa,CAACe,KADX;AAEdE,IAAAA,eAAe,EAAEjB,aAAa,CAACe,KAFjB;AAGdG,IAAAA,OAAO,EAAEC,IAAI,CAACjB,SAAL,CAAea;AAHV,GAAhB,CADyB,EAMzBjB,SAAS,CAACsB,KANe,CAApB;AA/BS,CAAlB;AAwCA,IAAMC,YAAY,GAAG;AACnBlB,EAAAA,QAAQ,EAAE,IADS;AAEnBE,EAAAA,IAAI,EAAE,IAFa;AAGnBE,EAAAA,IAAI,EAAE,IAHa;AAInBK,EAAAA,IAAI,EAAE,EAJa;AAKnBE,EAAAA,MAAM,EAAE,IALW;AAMnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,EAAE;AACTM,MAAAA,GAAG,EAAE,CAAC,CADG;AAETC,MAAAA,KAAK,EAAE,CAAC;AAFC;AADN;AANY,CAArB;;AAcA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,MAChBC,MADgB,GACgBD,KADhB,CAChBC,MADgB;AAAA,MACRd,IADQ,GACgBa,KADhB,CACRb,IADQ;AAAA,MACFE,MADE,GACgBW,KADhB,CACFX,MADE;AAAA,MACMa,KADN,GACgBF,KADhB,CACME,KADN;AAAA,MAEhBC,KAFgB,GAEGD,KAFH,CAEhBC,KAFgB;AAAA,MAETC,OAFS,GAEGF,KAFH,CAETE,OAFS;AAIxB,MAAMC,KAAK,GAAG;AACZd,IAAAA,SAAS,EAAE,EADC;AAEZC,IAAAA,eAAe,EAAE;AAFL,GAAd;;AAKA,MAAIL,IAAI,IAAIE,MAAZ,EAAoB;AAClB,QAAMiB,UAAU,GAAGnB,IAAnB;AACA,QAAMoB,WAAW,GAAGpB,IAAI,GAAGE,MAA3B;AAEAgB,IAAAA,KAAK,CAACb,eAAN,CAAsBgB,KAAtB,GAA8BF,UAA9B;AACAD,IAAAA,KAAK,CAACb,eAAN,CAAsBiB,MAAtB,GAA+BH,UAA/B;AACAD,IAAAA,KAAK,CAACb,eAAN,CAAsBkB,YAAtB,GAAqCJ,UAAU,GAAG,CAAlD;AAEAD,IAAAA,KAAK,CAACd,SAAN,CAAgBoB,QAAhB,GAA2B,IAA3B;AACAN,IAAAA,KAAK,CAACd,SAAN,CAAgBiB,KAAhB,GAAwBD,WAAxB;AACAF,IAAAA,KAAK,CAACd,SAAN,CAAgBkB,MAAhB,GAAyBF,WAAzB;AACAF,IAAAA,KAAK,CAACd,SAAN,CAAgBmB,YAAhB,GAA+BH,WAAW,GAAG,CAA7C;AACD,GAZD,MAYO,IAAIpB,IAAI,IAAI,CAACE,MAAb,EAAqB;AAC1BgB,IAAAA,KAAK,CAACd,SAAN,CAAgBiB,KAAhB,GAAwBrB,IAAxB;AACAkB,IAAAA,KAAK,CAACd,SAAN,CAAgBkB,MAAhB,GAAyBtB,IAAzB;AACAkB,IAAAA,KAAK,CAACd,SAAN,CAAgBmB,YAAhB,GAA+BvB,IAAI,GAAG,CAAtC;AACD;;AAED,MAAIc,MAAJ,EAAY;AACVI,IAAAA,KAAK,CAACd,SAAN,CAAgBqB,eAAhB,GAAkCR,OAAO,CAACS,WAA1C;AACD;;AAED,SAAO;AACLtB,IAAAA,SAAS,EAAE,CAACY,KAAK,CAACZ,SAAP,EAAkBc,KAAK,CAACd,SAAxB,EAAmCS,KAAK,CAACV,KAAN,CAAYC,SAA/C,CADN;AAELC,IAAAA,eAAe,EAAE,CACfW,KAAK,CAACX,eADS,EAEfa,KAAK,CAACb,eAFS,EAGfQ,KAAK,CAACV,KAAN,CAAYE,eAHG,CAFZ;AAOLC,IAAAA,OAAO,EAAE,CAACU,KAAK,CAACV,OAAP,EAAgBY,KAAK,CAACZ,OAAtB,EAA+BO,KAAK,CAACV,KAAN,CAAYG,OAA3C;AAPJ,GAAP;AASD;;AACD,IAAMqB,YAAY,GAAG,SAAfA,YAAe,OAAoB;AAAA,MAAjBhC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXK,IAAW,QAAXA,IAAW;AACvC,MAAI4B,SAAS,GAAG,EAAhB;;AAEA,MAAI,OAAOjC,IAAP,KAAgB,QAApB,EAA8B;AAC5BiC,IAAAA,SAAS,CAAC9B,IAAV,GAAiBH,IAAjB;AACD,GAFD,MAEO;AACLiC,IAAAA,SAAS,GAAGjC,IAAZ;AACD;;AAED,MAAI,CAACiC,SAAS,CAAC5B,IAAX,IAAmBA,IAAvB,EAA6B;AAC3B4B,IAAAA,SAAS,CAAC5B,IAAV,GAAiBA,IAAI,GAAG,CAAxB;AACD;;AAED,SAAO4B,SAAP;AACD,CAdD;;IAgBMC,K;;;AACJ,iBAAYhB,KAAZ,EAAmBiB,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,+EAAMjB,KAAN,EAAaiB,OAAb;AAEA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,+BAArB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,+BAAtB;AAJ0B;AAK3B;;;;kCAEaE,M,EAAQ;AAAA,wBACW,KAAKrB,KADhB;AAAA,UACZpB,IADY,eACZA,IADY;AAAA,UACNE,IADM,eACNA,IADM;AAAA,UACAO,MADA,eACAA,MADA;AAGpB,UAAII,OAAO,GAAG,IAAd;;AAEA,UAAIX,IAAJ,EAAU;AACR,YAAMiC,SAAS,GAAGD,YAAY,CAAC,KAAKd,KAAN,CAA9B;AACAP,QAAAA,OAAO,GAAG,oBAAC,IAAD,eAAUsB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,WAAV;AACD,OAHD,MAGO,IAAInC,IAAJ,EAAU;AACfa,QAAAA,OAAO,GAAG,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE4B,MAAM,CAAC5B,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,WAA8Bb,IAA9B,CAAV;AACD;;AAED,UAAM0C,cAAc,GAAG,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAAC9B,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCE,OAAhC,CAAvB;;AAEA,UAAI,CAACJ,MAAL,EAAa;AACX,eAAOiC,cAAP;AACD;;AAED,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAAC7B,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsC8B,cAAtC,CAAP;AACD;;;qCAEgB;AAAA,UACP5C,QADO,GACM,KAAKsB,KADX,CACPtB,QADO;;AAGf,UAAI,CAACA,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AAED,aAAOA,QAAP;AACD;;;6BAEQ;AACP,UAAM2C,MAAM,GAAGtB,SAAS,CAAC,KAAKC,KAAN,CAAxB;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEuB,UAAAA,aAAa,EAAE;AAAjB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKH,cAAL,EADH,EAEG,KAAKF,aAAL,CAAmBG,MAAnB,CAFH,CADF;AAMD;;;;EAhDiBjD,a;;AAmDpB4C,KAAK,CAACvC,SAAN,GAAkBA,SAAlB;AACAuC,KAAK,CAACpB,YAAN,GAAqBA,YAArB;AAEA,eAAepB,SAAS,CAACwC,KAAD,CAAxB","sourcesContent":["/* eslint-disable import/no-unresolved, import/extensions */\nimport { Text, View } from 'react-native';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n/* eslint-enable import/no-unresolved, import/extensions */\nimport Icon from '../Icon';\nimport { ViewPropTypes } from '../utils';\nimport withTheme from '../styles/withTheme';\n\nconst propTypes = {\n  /**\n   * The badge will be added relativelty to this node\n   */\n  children: PropTypes.node,\n  /**\n   * This is the content rendered within the badge\n   */\n  text: PropTypes.string,\n  /**\n   * When the icon is set, the content will be <Icon name={icon} /> element\n   */\n  icon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      name: PropTypes.string,\n      color: PropTypes.string,\n      size: PropTypes.number,\n    }),\n  ]),\n  /**\n   * Just sugar for style={{ container: { width: size, height: size, borderRadius: size / 2 }}}\n   */\n  size: PropTypes.number,\n  /**\n   * You can specify stroke for badge. Note that if you use stroke it swaps container and\n   * strokeContainer. So if you override styles of container you probably need to override\n   * strokeContainer instead the container. Because if you use stroke then the strokeContainer\n   * will be wrapper of whole badge component.\n   */\n  stroke: PropTypes.number,\n  style: PropTypes.oneOfType([\n    PropTypes.shape({\n      container: ViewPropTypes.style,\n      strokeContainer: ViewPropTypes.style,\n      content: Text.propTypes.style, // eslint-disable-line\n    }),\n    PropTypes.array,\n  ]),\n};\nconst defaultProps = {\n  children: null,\n  text: null,\n  icon: null,\n  size: 16,\n  stroke: null,\n  style: {\n    container: {\n      top: -8,\n      right: -8,\n    },\n  },\n};\n\nfunction getStyles(props) {\n  const { accent, size, stroke, theme } = props;\n  const { badge, palette } = theme;\n\n  const local = {\n    container: {},\n    strokeContainer: {},\n  };\n\n  if (size && stroke) {\n    const strokeSize = size;\n    const contentSize = size - stroke;\n\n    local.strokeContainer.width = strokeSize;\n    local.strokeContainer.height = strokeSize;\n    local.strokeContainer.borderRadius = strokeSize / 2;\n\n    local.container.position = null;\n    local.container.width = contentSize;\n    local.container.height = contentSize;\n    local.container.borderRadius = contentSize / 2;\n  } else if (size && !stroke) {\n    local.container.width = size;\n    local.container.height = size;\n    local.container.borderRadius = size / 2;\n  }\n\n  if (accent) {\n    local.container.backgroundColor = palette.accentColor;\n  }\n\n  return {\n    container: [badge.container, local.container, props.style.container],\n    strokeContainer: [\n      badge.strokeContainer,\n      local.strokeContainer,\n      props.style.strokeContainer,\n    ],\n    content: [badge.content, local.content, props.style.content],\n  };\n}\nconst mapIconProps = ({ icon, size }) => {\n  let iconProps = {};\n\n  if (typeof icon === 'string') {\n    iconProps.name = icon;\n  } else {\n    iconProps = icon;\n  }\n\n  if (!iconProps.size && size) {\n    iconProps.size = size / 2;\n  }\n\n  return iconProps;\n};\n\nclass Badge extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.renderContent = this.renderContent.bind(this);\n    this.renderChildren = this.renderChildren.bind(this);\n  }\n\n  renderContent(styles) {\n    const { text, icon, stroke } = this.props;\n\n    let content = null;\n\n    if (icon) {\n      const iconProps = mapIconProps(this.props);\n      content = <Icon {...iconProps} />;\n    } else if (text) {\n      content = <Text style={styles.content}>{text}</Text>;\n    }\n\n    const contentWrapper = <View style={styles.container}>{content}</View>;\n\n    if (!stroke) {\n      return contentWrapper;\n    }\n\n    return <View style={styles.strokeContainer}>{contentWrapper}</View>;\n  }\n\n  renderChildren() {\n    const { children } = this.props;\n\n    if (!children) {\n      return null;\n    }\n\n    return children;\n  }\n\n  render() {\n    const styles = getStyles(this.props);\n\n    return (\n      <View style={{ flexDirection: 'row' }}>\n        {this.renderChildren()}\n        {this.renderContent(styles)}\n      </View>\n    );\n  }\n}\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\n\nexport default withTheme(Badge);\n"]},"metadata":{},"sourceType":"module"}